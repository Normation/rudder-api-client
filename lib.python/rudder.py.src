#!/usr/bin/python3

import os
import json, requests, urllib

# Ignore proxies when dealing using the lib on localhost
os.environ['NO_PROXY'] = 'localhost'

# exceptions to catch : ConnectionError HTTPError Timeout TooManyRedirects
#    or RequestException that encompass all of the above

# change_info can be a string or a dict containing : { 'reason': reason, 'changeRequestName': changeRequestName, 'changeRequestDescription': changeRequestDescription }
# verify can be a path

class RudderError(requests.exceptions.RequestException):
  """Rudder did not return 200"""
  def __init__(self, *args, **kwargs):
    self.message = kwargs.get('message', None)
    resp = kwargs.get('response', None)
    try:
      self.rudder_info = json.loads(resp.text)
      if 'errorDetails' in self.rudder_info:
        self.message += self.rudder_info['errorDetails']
      elif 'error' in self.rudder_info:
        self.message += self.rudder_info['error']
    except ValueError:
      self.message += resp.text
    super(RudderError, self).__init__()


class RudderEndPoint:
  def __init__(self, endpoint_url="https://localhost/rudder", api_key=None, api_key_file='/var/rudder/run/api-token',
               version="latest", timeout=5, verify=True, proxy=None ):
    self.endpoint_url = endpoint_url
    self.timeout = timeout
    self.session = requests.Session()
    self.session.verify = verify
    if api_key is None:
        if os.path.exists(api_key_file):
            with open(api_key_file) as ftoken:
                api_key = ftoken.read()
    if not verify:
      try: # compatibility with centos 6
        import urllib3
        urllib3.disable_warnings()
      except:
        pass
    if proxy is not None:
      self.session.proxies = { 'http': proxy, 'https': proxy }
    self.session.headers = { "X-API-Token": api_key,
                             "X-API-Version": version,
                             "Content-Type": "application/json;charset=utf-8" }

  # Exceptions can be raised here !
  def request(self, method, api_url, change_info=None, data=None, json_data=None, return_raw=False):
    global RUDDER_DEBUG_QUERY
    if not api_url.startswith("/"):
        api_url = "/" + api_url
    if not api_url.startswith("/api"):
        api_url = "/api" + api_url
    # request tuning for Rudder server
    url = self.endpoint_url + api_url
    if type(change_info) is str:
      params = { 'reason': change_info }
    else:
      params = change_info

    # Manage json here, because request on centos 6 doesn't support it
    if data is not None:
      json_data = json.dumps(data)

    # usefull for debug
    self.debug_query = json_data
    self.debug_url = url
    self.debug_method = method
    self.debug_params = params

    # Do the call here
    self._res = self.session.request(method, url, params=change_info,
                                     # gotcha: for request, json=encode into json, data=take as is
                                     #         for this api, json=this is json, data=this is structured data
                                     #json=data, data=json_data,
                                     data=json_data,
                                     allow_redirects=True, timeout=self.timeout
                                     )

    # process returned data
    # self._res is used for debug / introspection purpose, do not rely on it
    if self._res.status_code not in [200, 201]:
      raise RudderError(message = "Rudder returned code "+str(self._res.status_code),
                        response = self._res)
    status = self._res.json()
    if 'result' in status and status['result'] != "success":
      raise RudderError(message = "Rudder did not return success",
                        response = self._res)

    if return_raw:
      return self._res.text
    # return only useful data, based on request type
    if method == "PUT" or method == "POST":
      if 'id' in status:
        return status['id']
    return status['data']


  #### API implementation: see http://www.rudder-project.org/rudder-api-doc/
  ####
  #### Autogenerated code, DO NOT MODIFY !
  #### End of autogenerated code

# Remove None values in a dictionary
def clean_params(data):
  empty_keys = [k for k,v in data.items() if not v]
  for k in empty_keys:
    if data[k] is None:
      del(data[k])


