{
  "components": {
    "securitySchemes": {
      "API tokens": {
        "description": "Authenticating against the API is mandatory for every request, as sensitive information like inventories or configuration rules may get exposed. It is done using a dedicated API Account, than can be created in the web interface on the 'API Accounts' page located inside the Administration part.\n\n![API Tokens settings](assets/APISettings.png \"API Tokens settings\")\n\nAPI Accounts are not linked to standard user accounts, and currently give full administrative privileges: they must be secured adequately. Once you have created an API account, you get a token that will be needed to authenticate every request. This token is the API equivalent of a password, and must be secured just like a password would be.\n\nOn any call to the API, you will need to add a **X-API-Token** header to your request to authenticate:\n\n\n    curl --request GET --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n\n\nIf you perform any action (creation, update, deletion) using the API, the event log generated will record the API account as the user.",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Token"
      }
    },
    "schemas": {
      "change-request": {
        "type": "object",
        "description": "Content of the change request",
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "name": {
            "type": "string",
            "example": "Remove unused security policy"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Deployed",
              "Pending deployment",
              "Cancelled",
              "Pending validation",
              "Open"
            ]
          },
          "acceptable": {
            "type": "boolean",
            "example": true
          },
          "created by": {
            "type": "string",
            "example": "Matthieu C."
          },
          "changes": {
            "type": "object",
            "properties": {
              "rules": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "example": "modify Rule"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "datasource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the data source to create.",
            "example": "test-data-source"
          },
          "name": {
            "type": "string",
            "description": "The human readable name of the data source to create.",
            "example": "Test data source"
          },
          "description": {
            "type": "string",
            "description": "Description of the goal of the data source to create.",
            "example": "Synchronize example data from the CMDB"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable data source.",
            "example": true
          },
          "updateTimeout": {
            "type": "integer",
            "description": "Duration in seconds before aborting data source update. The main goal is to prevent never ending requests. If a periodicity if configured, you should set that timeout at a lower value.",
            "example": 30
          },
          "runParameters": {
            "type": "object",
            "description": "Parameters to configure when the data source is fetched to update node properties.",
            "properties": {
              "onGeneration": {
                "type": "boolean",
                "example": true,
                "description": "Trigger a fetch at the beginning of a policy generation"
              },
              "onNewNode": {
                "type": "boolean",
                "example": true,
                "description": "Trigger a fetch when a new node is accepted, for that node"
              },
              "schedule": {
                "type": "object",
                "description": "Configure if data source should be fetch periodically",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "`scheduled` enables periodic update, `notscheduled` disables them",
                    "enum": [
                      "scheduled",
                      "notscheduled"
                    ],
                    "example": "scheduled"
                  }
                }
              }
            }
          },
          "type": {
            "type": "object",
            "description": "Define and configure data source type.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Data source type name",
                "example": "HTTP",
                "enum": [
                  "HTTP"
                ]
              },
              "parameters": {
                "type": "object",
                "description": "You can use Rudder variable expansion (`${rudder.node`, `${node.properties...}`)",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to contact. Rudder expansion available.",
                    "example": "http://jsonplaceholder.typicode.com/users/1"
                  },
                  "requestMethod": {
                    "type": "string",
                    "example": "GET",
                    "enum": [
                      "GET",
                      "POST"
                    ],
                    "description": "HTTP method to use to contact the URL."
                  },
                  "headers": {
                    "type": "array",
                    "description": "Represent HTTP headers for the query. Rudder expansion available.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "X-API-Key",
                          "description": "Name of the header"
                        },
                        "value": {
                          "type": "string",
                          "example": "05ce8e3d9df6",
                          "description": "Value of the header"
                        }
                      }
                    }
                  },
                  "path": {
                    "type": "string",
                    "description": "JSON path (as defined in [the specification](https://github.com/jayway/JsonPath/), without the leading `$.`) to find the interesting sub-json or string/number/boolean value in the answer. Let empty to use the whole answer as value."
                  },
                  "checkSsl": {
                    "type": "boolean",
                    "example": true,
                    "description": "Check SSL certificate validity for https. Must be set to false for self-signed certificate"
                  },
                  "requestTimeout": {
                    "type": "integer",
                    "example": 10,
                    "description": "Timeout in seconds for each HTTP request"
                  },
                  "requestMode": {
                    "type": "object",
                    "description": "Configure the strategy used to query the HTTP data source.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Node by node strategy",
                        "enum": [
                          "byNode"
                        ],
                        "example": "byNode"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "directive": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "Directive id"
          },
          "displayName": {
            "type": "string",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "Human readable name of the directive"
          },
          "shortDescription": {
            "type": "string",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "One line directive description"
          },
          "longDescription": {
            "type": "string",
            "format": "markdown",
            "example": "# Documentation\n* [Ticket link](https://tickets.example.com/issues/3456)",
            "description": "Description of the technique (rendered as markdown)"
          },
          "techniqueName": {
            "type": "string",
            "example": "userManagement",
            "description": "Directive id"
          },
          "techniqueVersion": {
            "type": "string",
            "example": "8.0",
            "description": "Directive id"
          },
          "priority": {
            "type": "integer",
            "description": "Directive priority. `0` has highest priority.",
            "example": 5,
            "minimum": 0,
            "maximum": 10
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Is the directive enabled"
          },
          "system": {
            "type": "boolean",
            "description": "If true it is an internal Rudder directive",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Value of the `name` key",
                  "example": "value"
                }
              },
              "example": {
                "customer": "MyCompany"
              }
            }
          },
          "parameters": {
            "type": "object",
            "description": "Directive parameters (depends on the source technique)",
            "example": {
              "name": "sections",
              "sections": [
                {
                  "section": {
                    "name": "File to manage",
                    "vars": [
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_ACTION",
                          "value": "copy"
                        }
                      },
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_SOURCE",
                          "value": "/vagrant/node.sh"
                        }
                      },
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_SYMLINK_ENFORCE",
                          "value": "false"
                        }
                      }
                    ],
                    "sections": [
                      {
                        "section": {
                          "name": "File",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_PATH",
                                "value": "/root/test"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "File cleaning options",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_DAYS",
                                "value": "0"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_OPTION",
                                "value": "none"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_PATTERN",
                                "value": ".*"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "Permissions",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_CHECK_PERMISSIONS",
                                "value": "false"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_GROUP",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_OWNER",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_PERM",
                                "value": "000"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_RECURSIVE",
                                "value": "1"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "Post-modification hook",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_COMMAND",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_RUN",
                                "value": "false"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "directive-new": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The id of the directive the clone will be based onto. If this parameter if provided,  the new directive will be a clone of this source. Other value will override values from the source."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "Directive id"
          },
          "displayName": {
            "type": "string",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "Human readable name of the directive"
          },
          "shortDescription": {
            "type": "string",
            "example": "91252ea2-feb2-412d-8599-c6945fee02c4",
            "description": "One line directive description"
          },
          "longDescription": {
            "type": "string",
            "format": "markdown",
            "example": "# Documentation\n* [Ticket link](https://tickets.example.com/issues/3456)",
            "description": "Description of the technique (rendered as markdown)"
          },
          "techniqueName": {
            "type": "string",
            "example": "userManagement",
            "description": "Directive id"
          },
          "techniqueVersion": {
            "type": "string",
            "example": "8.0",
            "description": "Directive id"
          },
          "priority": {
            "type": "integer",
            "description": "Directive priority. `0` has highest priority.",
            "example": 5,
            "minimum": 0,
            "maximum": 10
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Is the directive enabled"
          },
          "system": {
            "type": "boolean",
            "description": "If true it is an internal Rudder directive",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Value of the `name` key",
                  "example": "value"
                }
              },
              "example": {
                "customer": "MyCompany"
              }
            }
          },
          "parameters": {
            "type": "object",
            "description": "Directive parameters (depends on the source technique)",
            "example": {
              "name": "sections",
              "sections": [
                {
                  "section": {
                    "name": "File to manage",
                    "vars": [
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_ACTION",
                          "value": "copy"
                        }
                      },
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_SOURCE",
                          "value": "/vagrant/node.sh"
                        }
                      },
                      {
                        "var": {
                          "name": "FILE_AND_FOLDER_MANAGEMENT_SYMLINK_ENFORCE",
                          "value": "false"
                        }
                      }
                    ],
                    "sections": [
                      {
                        "section": {
                          "name": "File",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_PATH",
                                "value": "/root/test"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "File cleaning options",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_DAYS",
                                "value": "0"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_OPTION",
                                "value": "none"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_DELETION_PATTERN",
                                "value": ".*"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "Permissions",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_CHECK_PERMISSIONS",
                                "value": "false"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_GROUP",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_OWNER",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_PERM",
                                "value": "000"
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_RECURSIVE",
                                "value": "1"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "section": {
                          "name": "Post-modification hook",
                          "vars": [
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_COMMAND",
                                "value": ""
                              }
                            },
                            {
                              "var": {
                                "name": "FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_RUN",
                                "value": "false"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Group id",
            "default": "{autogenerated}",
            "example": "32d013f7-b6d8-46c8-99d3-016307fa66c0"
          },
          "displayName": {
            "type": "string",
            "description": "Name of the group",
            "example": "Ubuntu 18.04 nodes"
          },
          "description": {
            "type": "string",
            "description": "Group description",
            "example": "Documentation for the group"
          },
          "query": {
            "type": "object",
            "description": "The criteria defining the group",
            "properties": {
              "select": {
                "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
                "type": "string",
                "default": "node"
              },
              "composition": {
                "type": "string",
                "enum": [
                  "and",
                  "or"
                ],
                "default": "and",
                "description": "Boolean operator to use between each  `where` criteria.",
                "example": "and"
              },
              "where": {
                "type": "array",
                "description": "List of criteria",
                "items": {
                  "type": "object",
                  "properties": {
                    "objectType": {
                      "type": "string",
                      "description": "Type of the object",
                      "example": "node"
                    },
                    "attribute": {
                      "description": "Attribute to compare",
                      "example": "OS",
                      "type": "string"
                    },
                    "comparator": {
                      "description": "Comparator to use",
                      "example": "eq",
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "example": "Linux",
                      "description": "Value to compare against"
                    }
                  }
                }
              }
            }
          },
          "nodeIds": {
            "type": "array",
            "description": "List of nodes in the group",
            "items": {
              "type": "string",
              "format": "uuid (or \"root\")",
              "example": "109142a2-40eb-4e6d-84b4-7ebe3670474c",
              "description": "Node in the group"
            }
          },
          "dynamic": {
            "type": "boolean",
            "default": true,
            "description": "Should the group be dynamically refreshed (if not, it is a static group)"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the group"
          },
          "groupClass": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "condition",
              "example": "group_ubuntu",
              "description": "Conditions defined on nodes in the groups. There is one based on the group id, and one based on the group name."
            }
          }
        }
      },
      "group-new": {
        "type": "object",
        "required": [
          "displayName",
          "category"
        ],
        "properties": {
          "source": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source."
          },
          "category": {
            "type": "string",
            "format": "uuid",
            "description": "Id of the new group's category",
            "example": "e17ecf6a-a9f2-44de-a97c-116d24d30ff4"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Group id, only provide it when needed.",
            "default": "{autogenerated}",
            "example": "32d013f7-b6d8-46c8-99d3-016307fa66c0"
          },
          "displayName": {
            "type": "string",
            "description": "Name of the group",
            "example": "Ubuntu 18.04 nodes"
          },
          "description": {
            "type": "string",
            "description": "Group description",
            "example": "Documentation for the group"
          },
          "query": {
            "type": "object",
            "description": "The criteria defining the group. If not provided, the group will be empty.",
            "properties": {
              "select": {
                "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
                "type": "string",
                "default": "node"
              },
              "composition": {
                "type": "string",
                "enum": [
                  "and",
                  "or"
                ],
                "default": "and",
                "description": "Boolean operator to use between each  `where` criteria.",
                "example": "and"
              },
              "where": {
                "type": "array",
                "description": "List of criteria",
                "items": {
                  "type": "object",
                  "properties": {
                    "objectType": {
                      "type": "string",
                      "description": "Type of the object",
                      "example": "node"
                    },
                    "attribute": {
                      "description": "Attribute to compare",
                      "example": "OS",
                      "type": "string"
                    },
                    "comparator": {
                      "description": "Comparator to use",
                      "example": "eq",
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "example": "Linux",
                      "description": "Value to compare against"
                    }
                  }
                }
              }
            }
          },
          "dynamic": {
            "type": "boolean",
            "default": true,
            "description": "Should the group be dynamically refreshed (if not, it is a static group)"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the group"
          }
        }
      },
      "group-category": {
        "type": "object",
        "required": [
          "parent",
          "name"
        ],
        "properties": {
          "parent": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The parent category of the groups"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Group category id, only provide it when needed.",
            "default": "{autogenerated}",
            "example": "32d013f7-b6d8-46c8-99d3-016307fa66c0"
          },
          "name": {
            "type": "string",
            "description": "Name of the group category",
            "example": "Hardware groups"
          },
          "description": {
            "type": "string",
            "description": "Group category description",
            "example": "Nodes by hardware provider"
          }
        }
      },
      "group-category-update": {
        "type": "object",
        "required": [
          "parent",
          "name"
        ],
        "properties": {
          "parent": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The parent category of the groups"
          },
          "name": {
            "type": "string",
            "description": "Name of the group category",
            "example": "Hardware groups"
          },
          "description": {
            "type": "string",
            "description": "Group category description",
            "example": "Nodes by hardware provider"
          }
        }
      },
      "group-update": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "format": "uuid",
            "description": "Id of the new group's category",
            "example": "e17ecf6a-a9f2-44de-a97c-116d24d30ff4"
          },
          "displayName": {
            "type": "string",
            "description": "Name of the group",
            "example": "Ubuntu 18.04 nodes"
          },
          "description": {
            "type": "string",
            "description": "Group description",
            "example": "Documentation for the group"
          },
          "query": {
            "type": "object",
            "description": "The criteria defining the group. If not provided, the group will be empty.",
            "properties": {
              "select": {
                "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
                "type": "string",
                "default": "node"
              },
              "composition": {
                "type": "string",
                "enum": [
                  "and",
                  "or"
                ],
                "default": "and",
                "description": "Boolean operator to use between each  `where` criteria.",
                "example": "and"
              },
              "where": {
                "type": "array",
                "description": "List of criteria",
                "items": {
                  "type": "object",
                  "properties": {
                    "objectType": {
                      "type": "string",
                      "description": "Type of the object",
                      "example": "node"
                    },
                    "attribute": {
                      "description": "Attribute to compare",
                      "example": "OS",
                      "type": "string"
                    },
                    "comparator": {
                      "description": "Comparator to use",
                      "example": "eq",
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "example": "Linux",
                      "description": "Value to compare against"
                    }
                  }
                }
              }
            }
          },
          "dynamic": {
            "type": "boolean",
            "default": true,
            "description": "Should the group be dynamically refreshed (if not, it is a static group)"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable or disable the group"
          }
        }
      },
      "node-full": {
        "type": "object",
        "required": [
          "id",
          "hostname",
          "status",
          "ipAddresses",
          "managementTechnology",
          "policyServerId",
          "properties"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of the node",
            "format": "uuid (or \"root\")",
            "example": "9a1773c9-0889-40b6-be89-f6504443ac1b"
          },
          "hostname": {
            "type": "string",
            "description": "Fully qualified name of the node",
            "example": "node1.example.com"
          },
          "status": {
            "type": "string",
            "description": "Status of the node",
            "enum": [
              "pending",
              "accepted",
              "deleted"
            ],
            "example": "accepted"
          },
          "architectureDescription": {
            "type": "string",
            "example": "x86_64",
            "description": "Information about CPU architecture (32/64 bits)"
          },
          "description": {
            "type": "string",
            "example": "",
            "description": "A human intended description of the node (not used)"
          },
          "ipAddresses": {
            "type": "array",
            "description": "IP addresses of the node (IPv4 and IPv6)",
            "items": {
              "type": "string",
              "example": "192.168.23.45",
              "description": "IP of the node"
            }
          },
          "lastRunDate": {
            "type": "string",
            "format": "date",
            "example": "2020-02-29T14:48:28Z",
            "description": "Date and time of the latest run, if one is available (node time)"
          },
          "lastInventoryDate": {
            "type": "string",
            "example": "2020-02-29T10:11:32Z",
            "format": "date",
            "description": "Date and time of the latest generated inventory, if one is available (node time)"
          },
          "machine": {
            "description": "Information about the underlying machine",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Rudder unique identifier for the machine"
              },
              "type": {
                "type": "string",
                "description": "Type of the machine",
                "enum": [
                  "Physical",
                  "Virtual"
                ],
                "example": "Virtual"
              },
              "provider": {
                "type": "string",
                "example": "vbox",
                "description": "In the case of VM, the VM technology"
              },
              "manufacturer": {
                "type": "string",
                "example": "innotek GmbH",
                "description": "Information about machine manufacturer"
              },
              "serialNumber": {
                "type": "string",
                "example": "ece12459-2b90-49c9-ab1e-72e38f797421",
                "description": "If available, a unique identifier provided by the machine"
              }
            }
          },
          "os": {
            "type": "object",
            "description": "Information about the operating system",
            "required": [
              "type",
              "name",
              "version",
              "fullName",
              "kernelVersion"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "Linux",
                "description": "Family of the OS",
                "enum": [
                  "Windows",
                  "Linux",
                  "AIX",
                  "FreeBSD"
                ]
              },
              "name": {
                "type": "string",
                "description": "Operating system name (distribution on Linux, etc.)",
                "example": "Centos"
              },
              "version": {
                "type": "string",
                "description": "OS version",
                "example": "7.6.1810"
              },
              "fullName": {
                "type": "string",
                "description": "Full operating system name",
                "example": "CentOS Linux release 7.6.1810 (Core)"
              },
              "servicePack": {
                "type": "string",
                "description": "If relevant, the service pack of the OS",
                "example": "3"
              },
              "kernelVersion": {
                "type": "string",
                "description": "Version of the OS kernel",
                "example": "3.10.0-957.1.3.el7.x86_64"
              }
            }
          },
          "managementTechnology": {
            "type": "array",
            "description": "Management agents running on the node",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Agent name",
                  "example": "Rudder"
                },
                "version": {
                  "type": "string",
                  "description": "Agent version",
                  "example": "6.0.3.release-1.EL.7"
                }
              }
            }
          },
          "policyServerId": {
            "type": "string",
            "format": "uuid (or \"root\")",
            "example": "root",
            "description": "Rudder policy server managing the node"
          },
          "properties": {
            "type": "array",
            "description": "Node properties (either set by user or filled by third party sources)",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Property name",
                  "example": "datacenter"
                },
                "value": {
                  "format": "string or JSON",
                  "example": "AMS2",
                  "description": "Property value (can be a string or JSON object)"
                }
              }
            }
          },
          "policyMode": {
            "type": "string",
            "enum": [
              "enforce",
              "audit",
              "default"
            ],
            "example": "audit",
            "description": "Rudder policy mode for the node (`default` follows the global configuration)"
          },
          "ram": {
            "type": "integer",
            "description": "Size of RAM in MB"
          },
          "timezone": {
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Timezone name",
                "example": "UTC"
              },
              "offset": {
                "type": "string",
                "format": "+/-difference",
                "description": "Timezone offset to UTC",
                "example": "+0000"
              }
            }
          },
          "accounts": {
            "description": "User accounts declared in the node",
            "type": "array",
            "items": {
              "type": "string",
              "example": "root",
              "description": "User present on the system"
            }
          },
          "bios": {
            "type": "object",
            "description": "BIOS information",
            "properties": {
              "name": {
                "type": "string",
                "description": "BIOS name",
                "example": "VirtualBox"
              },
              "version": {
                "type": "string",
                "description": "BIOS version",
                "example": "1.2.3"
              },
              "editor": {
                "type": "string",
                "description": "BIOS editor",
                "example": "innotek GmbH"
              },
              "quantity": {
                "type": "integer",
                "description": "Number of BIOS on the machine",
                "example": 1
              },
              "releaseDate": {
                "type": "string",
                "description": "Release date of the BIOS",
                "example": "2006-12-01 00:00:00+0000"
              },
              "description": {
                "type": "string",
                "description": "System provided description of the BIOS (long name)",
                "example": "FIXME"
              }
            }
          },
          "controllers": {
            "type": "array",
            "description": "Physical controller information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Controller name"
                },
                "type": {
                  "type": "string",
                  "description": "Controller type"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of that controller",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the controller"
                },
                "manufacturer": {
                  "type": "string",
                  "description": "Controller manufacturer"
                }
              }
            }
          },
          "environmentVariables": {
            "type": "array",
            "description": "Environment variables defined on the node in the context of the agent",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Environment variable name",
                  "example": "LANG"
                },
                "value": {
                  "type": "string",
                  "description": "Environment variable value",
                  "example": "en_US.UTF-8"
                }
              }
            }
          },
          "fileSystems": {
            "type": "array",
            "description": "File system declared on the node",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Type of file system (`ext4`, `swap`, etc.)",
                  "example": "ext4"
                },
                "mountPoint": {
                  "type": "string",
                  "description": "Mount point",
                  "example": "/srv"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the file system"
                },
                "fileCount": {
                  "type": "integer",
                  "description": "Number of files",
                  "example": 1456
                },
                "freeSpace": {
                  "type": "integer",
                  "description": "Free space remaining",
                  "example": 3487
                },
                "totalSpace": {
                  "type": "integer",
                  "description": "Total space",
                  "example": 208869
                }
              }
            }
          },
          "managementTechnologyDetails": {
            "type": "object",
            "description": "Additional information about management technology",
            "properties": {
              "cfengineKeys": {
                "description": "Certificates used by the agent",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "PEM",
                  "description": "Certificate (or public key for <6.0 agents) used by the agent",
                  "example": "-----BEGIN CERTIFICATE-----\\nMIIFqDCC[...]3tALNn\\n-----END CERTIFICATE-----"
                }
              },
              "cfengineUser": {
                "type": "string",
                "description": "Local user account used by the agent",
                "example": "root"
              }
            }
          },
          "memories": {
            "type": "array",
            "description": "Memory slots",
            "items": {
              "type": "object",
              "description": "Memory slots",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the memory slot or memory module"
                },
                "speed": {
                  "type": "integer",
                  "description": "Memory speed (frequency)",
                  "example": 1066
                },
                "type": {
                  "type": "string",
                  "description": "Memory slot type"
                },
                "caption": {
                  "type": "string",
                  "description": "Manufacturer provided information about the module"
                },
                "quantity": {
                  "type": "string",
                  "example": 1,
                  "description": "Number of modules in that slot"
                },
                "capacity": {
                  "type": "integer",
                  "example": 2,
                  "description": "Size of modules"
                },
                "slotNumber": {
                  "type": "integer",
                  "example": 3,
                  "description": "Slot number"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description"
                },
                "serialNumber": {
                  "type": "string",
                  "description": "Serial number of the module"
                }
              }
            }
          },
          "networkInterfaces": {
            "type": "array",
            "description": "Detailed information about registered network interfaces on the node",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "eth0",
                  "description": "Interface name (for ex \"eth0\")"
                },
                "mask": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "CIDR",
                    "example": "255.255.255.0",
                    "description": "Network interface mask"
                  }
                },
                "type": {
                  "type": "string",
                  "example": "ethernet",
                  "description": "Information about the type of network interface"
                },
                "speed": {
                  "type": "string",
                  "example": "1000",
                  "description": "Information about synchronization speed"
                },
                "status": {
                  "type": "string",
                  "example": "Up",
                  "description": "network interface status (enabled or not, up or down)"
                },
                "dhcpServer": {
                  "type": "string",
                  "description": "DHCP server managing that network interface",
                  "example": "192.168.34.5"
                },
                "macAddress": {
                  "type": "string",
                  "description": "MAC address of the network interface",
                  "example": "08:00:27:6f:5c:14"
                },
                "ipAddresses": {
                  "type": "array",
                  "description": "IP addresses of the network interface",
                  "items": {
                    "type": "string",
                    "description": "IP address",
                    "example": "192.168.76.4"
                  }
                }
              }
            }
          },
          "ports": {
            "type": "array",
            "description": "Physical port information objects",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Port name"
                },
                "type": {
                  "type": "string",
                  "description": "Port type"
                },
                "quantity": {
                  "type": "integer",
                  "example": 1,
                  "description": "Quantity of similar ports"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the port"
                }
              }
            }
          },
          "processes": {
            "type": "array",
            "description": "Process running (at inventory time)",
            "items": {
              "type": "object",
              "description": "Process information",
              "properties": {
                "pid": {
                  "type": "integer",
                  "example": 3576,
                  "description": "PID of the process"
                },
                "tty": {
                  "type": "string",
                  "example": "?",
                  "description": "TTY to which the process is"
                },
                "name": {
                  "type": "string",
                  "example": "/usr/sbin/httpd -DFOREGROUND",
                  "description": "Process name"
                },
                "user": {
                  "type": "string",
                  "description": "User account who started the process",
                  "example": "apache"
                },
                "started": {
                  "type": "string",
                  "format": "date",
                  "example": "2020-02-29 00:24",
                  "description": "Started date and time of the process"
                },
                "memory": {
                  "type": "number",
                  "format": "float",
                  "description": "Memory allocated to the process (at inventory time)",
                  "example": 0.4000000059604645
                },
                "virtualMemory": {
                  "type": "integer",
                  "description": "Virtual memory allocated to the process (at inventory time)",
                  "example": 4380
                },
                "cpuUsage": {
                  "type": "integer",
                  "description": "CPU used by the process (at inventory time)",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "description": "System provided description about the process"
                }
              }
            }
          },
          "processors": {
            "type": "array",
            "description": "CPU information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "CPU name",
                  "example": "Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz"
                },
                "arch": {
                  "type": "string",
                  "description": "CPU architecture",
                  "example": "i386"
                },
                "model": {
                  "type": "integer",
                  "description": "CPU model",
                  "example": 158
                },
                "familyName": {
                  "type": "string",
                  "description": "CPU family"
                },
                "core": {
                  "type": "integer",
                  "description": "Number of core for that CPU",
                  "example": 1
                },
                "speed": {
                  "type": "integer",
                  "description": "Speed (frequency) of the CPU",
                  "example": 2800
                },
                "thread": {
                  "type": "integer",
                  "description": "Number of thread by core for the CPU",
                  "example": 1
                },
                "stepping": {
                  "type": "integer",
                  "description": "Stepping or power management information",
                  "example": 9
                },
                "manufacturer": {
                  "type": "string",
                  "description": "CPU manufacturer",
                  "example": "Intel"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Number of CPU with these features",
                  "example": 1
                },
                "cpuid": {
                  "type": "string",
                  "description": "Identifier of the CPU"
                },
                "externalClock": {
                  "description": "External clock used by the CPU",
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the CPU"
                }
              }
            }
          },
          "slots": {
            "type": "array",
            "description": "Physical extension slot information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Slot name or identifier"
                },
                "status": {
                  "type": "string",
                  "description": "Slot status (used, powered, etc)"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of similar slots"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the slots"
                }
              }
            }
          },
          "software": {
            "type": "array",
            "description": "Software installed on the node (can have thousands items)",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the software (as reported by the node)",
                  "example": "libcurl"
                },
                "version": {
                  "type": "string",
                  "description": "Version of the software",
                  "example": "7.29.0-54.el7_7.2"
                },
                "editor": {
                  "type": "string",
                  "description": "Editor of the software",
                  "example": "CentOS"
                },
                "description": {
                  "type": "string",
                  "description": "A description of the software",
                  "example": "A library for getting files from web servers"
                },
                "releaseDate": {
                  "type": "string",
                  "format": "date",
                  "description": "Release date of the software"
                },
                "license": {
                  "type": "object",
                  "description": "Information about the license",
                  "properties": {
                    "oem": {
                      "type": "string",
                      "description": "Is this an OEM license (and information)"
                    },
                    "name": {
                      "type": "string",
                      "description": "License name"
                    },
                    "productId": {
                      "type": "string",
                      "description": "License product identifier"
                    },
                    "productKey": {
                      "type": "string",
                      "description": "License key"
                    },
                    "description": {
                      "type": "string",
                      "description": "License description"
                    },
                    "expirationDate": {
                      "format": "date",
                      "type": "string",
                      "description": "License expiration date"
                    }
                  }
                }
              }
            }
          },
          "sound": {
            "type": "array",
            "description": "Sound card information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Sound card name"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of similar sound cards",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the sound card"
                }
              }
            }
          },
          "storage": {
            "type": "array",
            "description": "Storage (disks) information objects",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Storage name",
                  "example": "sda"
                },
                "type": {
                  "type": "string",
                  "description": "Storage type",
                  "example": "disk"
                },
                "size": {
                  "type": "integer",
                  "description": "Storage size in MB",
                  "example": 85899
                },
                "model": {
                  "type": "string",
                  "description": "Storage model",
                  "example": "VBOXHARDDISK"
                },
                "firmware": {
                  "type": "string",
                  "description": "Storage firmware information",
                  "example": "10"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of similar storage",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "description": "System provided information about the storage"
                },
                "manufacturer": {
                  "type": "string",
                  "description": "Storage manufacturer"
                },
                "serialNumber": {
                  "type": "string",
                  "description": "Storage serial number",
                  "example": "000a1954"
                }
              }
            }
          },
          "videos": {
            "type": "array",
            "description": "Video card information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Video card name"
                },
                "memory": {
                  "type": "string",
                  "description": "Quantity of memory for that video card"
                },
                "chipset": {
                  "type": "string",
                  "description": "information about video card chipset"
                },
                "quantity": {
                  "type": "integer",
                  "example": 1,
                  "description": "Quantity of similar video cards"
                },
                "resolution": {
                  "type": "string",
                  "description": "Resolution used by that video card at inventory time"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description for that video card"
                }
              }
            }
          },
          "virtualMachines": {
            "type": "array",
            "description": "Hosted virtual machine information",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the hosted virtual machine"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the hosted virtual machine"
                },
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier of the hosted virtual machine"
                },
                "vcpu": {
                  "type": "string",
                  "description": "Number of virtual CPU allocated to the hosted virtual machine"
                },
                "owner": {
                  "type": "string",
                  "description": "Owner of the hosted virtual machine"
                },
                "status": {
                  "type": "string",
                  "description": "Status (up, starting, etc) of the hosted virtual machine"
                },
                "memory": {
                  "type": "string",
                  "description": "Memory allocated to the hosted virtual machine"
                },
                "subsystem": {
                  "type": "string",
                  "description": "Technology of the hosted virtual machine"
                },
                "description": {
                  "type": "string",
                  "description": "System provided description of the hosted virtual machine"
                }
              }
            }
          }
        }
      },
      "node-settings": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Property name",
                  "example": "datacenter"
                },
                "value": {
                  "format": "string or JSON",
                  "example": "AMS2",
                  "description": "Property value (can be a string or JSON object)"
                }
              }
            }
          },
          "policy": {
            "type": "string",
            "description": "In which mode the node will apply its configuration policy. Use `default` to use the global mode.",
            "enum": [
              "audit",
              "enforce",
              "default"
            ],
            "example": "audit"
          },
          "state": {
            "type": "string",
            "description": "The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.",
            "enum": [
              "enabled",
              "ignored",
              "empty-policies",
              "initializing",
              "preparing-eol"
            ],
            "example": "enabled"
          },
          "agentKey": {
            "type": "object",
            "description": "The agent key information",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "certified",
                  "undefined"
                ],
                "description": "Status of certificate verification (reset to `undefined` to trust a new certificate)"
              },
              "value": {
                "type": "string",
                "format": "PEM",
                "description": "Certificate (or public key for <6.0 agents) used by the agent"
              }
            }
          }
        }
      },
      "parameter": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Name of the parameter",
            "example": "rudder_file_edit_footer"
          },
          "value": {
            "example": "### End of file managed by Rudder ###",
            "description": "Value of the parameter",
            "type": "string"
          },
          "description": {
            "type": "string",
            "example": "Default inform message put in footer of managed files by Rudder",
            "description": "Description of the parameter"
          },
          "overridable": {
            "type": "boolean",
            "description": "Is the global parameter overridable by node",
            "example": false
          }
        }
      },
      "rule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rule id",
            "example": "0c1713ae-cb9d-4f7b-abda-ca38c5d643ea",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "example": "Security policy",
            "description": "Rule name"
          },
          "shortDescription": {
            "type": "string",
            "example": "Baseline applying CIS guidelines",
            "description": "One line rule description"
          },
          "longDescription": {
            "type": "string",
            "example": "This rules should be applied to all Linux nodes required basic hardening",
            "description": "Rule documentation"
          },
          "directives": {
            "type": "array",
            "description": "Directives linked to the rule",
            "items": {
              "type": "string",
              "description": "Directive id"
            }
          },
          "targets": {
            "type": "array",
            "description": "Groups linked to the rule",
            "items": {
              "type": "string",
              "description": "Group id"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the rule enabled",
            "example": true
          },
          "system": {
            "type": "boolean",
            "description": "If true it is an internal Rudder rule",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Value of the `name` key",
                  "example": "value"
                }
              },
              "example": {
                "customer": "MyCompany"
              }
            }
          }
        }
      },
      "rule-new": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The id of the rule the clone will be based onto. If this parameter if provided,  the new rule will be a clone of this source. Other value will override values from the source."
          },
          "id": {
            "type": "string",
            "description": "Rule id",
            "example": "0c1713ae-cb9d-4f7b-abda-ca38c5d643ea",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "example": "Security policy",
            "description": "Rule name"
          },
          "shortDescription": {
            "type": "string",
            "example": "Baseline applying CIS guidelines",
            "description": "One line rule description"
          },
          "longDescription": {
            "type": "string",
            "example": "This rules should be applied to all Linux nodes required basic hardening",
            "description": "Rule documentation"
          },
          "directives": {
            "type": "array",
            "description": "Directives linked to the rule",
            "items": {
              "type": "string",
              "description": "Directive id"
            }
          },
          "targets": {
            "type": "array",
            "description": "Groups linked to the rule",
            "items": {
              "type": "string",
              "description": "Group id"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the rule enabled",
            "example": true
          },
          "system": {
            "type": "boolean",
            "description": "If true it is an internal Rudder rule",
            "example": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Value of the `name` key",
                  "example": "value"
                }
              },
              "example": {
                "customer": "MyCompany"
              }
            }
          }
        }
      },
      "rule-category": {
        "type": "object",
        "required": [
          "parent",
          "name"
        ],
        "properties": {
          "parent": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The parent category of the rules"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rule category id, only provide it when needed.",
            "default": "{autogenerated}",
            "example": "32d013f7-b6d8-46c8-99d3-016307fa66c0"
          },
          "name": {
            "type": "string",
            "description": "Name of the rule category",
            "example": "Security policies"
          },
          "description": {
            "type": "string",
            "description": "Rules category description",
            "example": "Baseline applying CIS guidelines"
          }
        }
      },
      "rule-category-update": {
        "type": "object",
        "required": [
          "parent",
          "name"
        ],
        "properties": {
          "parent": {
            "type": "string",
            "format": "uuid",
            "example": "b9f6d98a-28bc-4d80-90f7-d2f14269e215",
            "description": "The parent category of the rules"
          },
          "name": {
            "type": "string",
            "description": "Name of the rule category",
            "example": "Security policies"
          },
          "description": {
            "type": "string",
            "description": "Rules category description",
            "example": "Baseline applying CIS guidelines"
          }
        }
      },
      "techniques": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Technique name",
              "example": "userManagement"
            },
            "versions": {
              "type": "array",
              "description": "Available versions for this technique",
              "items": {
                "type": "string",
                "description": "Technique version",
                "example": "6.0"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "change-request-id": {
        "name": "changeRequestId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "description": "Change request id",
          "example": 37
        }
      },
      "compliance-level": {
        "name": "level",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 4,
          "default": 10
        },
        "description": "Number of depth level of compliance objects to display (1:rules, 2:directives, 3:components, 4:nodes, 5:values, 6:reports)"
      },
      "node-id": {
        "name": "nodeId",
        "in": "path",
        "required": true,
        "description": "Id of the target node",
        "schema": {
          "type": "string",
          "format": "uuid (or \"root\")",
          "example": "9a1773c9-0889-40b6-be89-f6504443ac1b"
        }
      },
      "rule-id": {
        "name": "ruleId",
        "in": "path",
        "required": true,
        "description": "Id of the target rule",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9a1773c9-0889-40b6-be89-f6504443ac1b"
        }
      },
      "datasource-id": {
        "name": "datasourceId",
        "in": "path",
        "required": true,
        "description": "Id of the data source",
        "schema": {
          "type": "string",
          "example": "test-data-source"
        }
      },
      "directive-id": {
        "name": "directiveId",
        "in": "path",
        "required": true,
        "description": "Id of the directive",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9a1773c9-0889-40b6-be89-f6504443ac1b"
        }
      },
      "group-category-id": {
        "name": "groupCategoryId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "Group category id",
          "example": "e0a311fa-f7b2-4f9e-89a9-db517b9c6b90"
        }
      },
      "group-id": {
        "name": "groupId",
        "in": "path",
        "required": true,
        "description": "Id of the group",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9a1773c9-0889-40b6-be89-f6504443ac1b"
        }
      },
      "include": {
        "name": "include",
        "in": "query",
        "description": "Level of information to include from the node inventory. Some base levels are defined (**minimal**, **default**, **full**). You can add fields you want to a base level by adding them to the list, possible values are keys from json answer. If you don't provide a base level, they will be added to `default` level, so if you only want os details, use `minimal,os` as the value for this parameter.\n\n* **minimal** includes: `id`, `hostname` and `status`\n* **default** includes **minimal** plus `architectureDescription`, `description`, `ipAddresses`, `lastRunDate`, `lastInventoryDate`, `machine`, `os`, `managementTechnology`, `policyServerId`, `properties`, `policyMode `, `ram` and `timezone` \n* **full** includes: **default** plus `accounts`, `bios`, `controllers`, `environmentVariables`, `fileSystems`, `managementTechnologyDetails`, `memories`, `networkInterfaces`, `ports`, `processes`, `processors`, `slots`, `software`, `sound`, `storage`, `videos` and `virtualMachines `",
        "schema": {
          "type": "string",
          "default": "default",
          "format": "comma-separated list",
          "example": "minimal"
        }
      },
      "node-query": {
        "name": "query",
        "in": "query",
        "description": "The criterion you want to find for your nodes. Replaces the `where`, `composition` and `select` parameters in a single parameter.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "select": {
                  "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
                  "type": "string",
                  "default": "node"
                },
                "composition": {
                  "type": "string",
                  "enum": [
                    "and",
                    "or"
                  ],
                  "default": "and",
                  "description": "Boolean operator to use between each  `where` criteria.",
                  "example": "and"
                },
                "where": {
                  "type": "array",
                  "description": "List of criteria",
                  "items": {
                    "type": "object",
                    "properties": {
                      "objectType": {
                        "type": "string",
                        "description": "Type of the object",
                        "example": "node"
                      },
                      "attribute": {
                        "description": "Attribute to compare",
                        "example": "OS",
                        "type": "string"
                      },
                      "comparator": {
                        "description": "Comparator to use",
                        "example": "eq",
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "example": "Linux",
                        "description": "Value to compare against"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "node-where": {
        "name": "where",
        "in": "query",
        "description": "The criterion you want to find for your nodes",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "description": "List of criteria",
              "items": {
                "type": "object",
                "properties": {
                  "objectType": {
                    "type": "string",
                    "description": "Type of the object",
                    "example": "node"
                  },
                  "attribute": {
                    "description": "Attribute to compare",
                    "example": "OS",
                    "type": "string"
                  },
                  "comparator": {
                    "description": "Comparator to use",
                    "example": "eq",
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "example": "Linux",
                    "description": "Value to compare against"
                  }
                }
              }
            }
          }
        }
      },
      "node-composition": {
        "name": "composition",
        "in": "query",
        "description": "Boolean operator to use between each  `where` criteria.",
        "schema": {
          "type": "string",
          "enum": [
            "and",
            "or"
          ],
          "default": "and",
          "example": "and"
        }
      },
      "node-select": {
        "name": "select",
        "in": "query",
        "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
        "schema": {
          "type": "string",
          "default": "node"
        }
      },
      "parameter-id": {
        "name": "parameterId",
        "in": "path",
        "required": true,
        "description": "Id of the parameter to manage",
        "schema": {
          "type": "string",
          "example": "rudder_file_edit_header"
        }
      },
      "rule-category-id": {
        "name": "ruleCategoryId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "Rule category id",
          "example": "e0a311fa-f7b2-4f9e-89a9-db517b9c6b90"
        }
      },
      "setting-id": {
        "name": "settingId",
        "in": "path",
        "required": true,
        "description": "Id of the setting to set",
        "schema": {
          "type": "string",
          "example": "global_policy_mode"
        }
      },
      "archive-kind": {
        "name": "archiveKind",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "full",
            "groups",
            "rules",
            "directives"
          ],
          "example": "full"
        },
        "description": "Type of archive to make"
      },
      "technique-name": {
        "name": "techniqueName",
        "in": "path",
        "description": "Technique name",
        "required": true,
        "schema": {
          "type": "string",
          "example": "userManagement",
          "description": "Technique name"
        }
      },
      "technique-version": {
        "name": "techniqueVersion",
        "in": "path",
        "description": "Technique version",
        "required": true,
        "schema": {
          "type": "string",
          "example": "6.0",
          "description": "Technique version"
        }
      }
    },
    "responses": {
      "agent-output": {
        "description": "Agent output",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "Start execution with config [20200218-112602-11ce4f64]\nHostname        M| State         Technique                 Component                 Key                Message 192.168.210.5   E| compliant     Common                    ncf Initialization                           Configuration library initialization was correct 192.168.210.5   E| compliant     Common                    Update                                       Policy and configuration library are already up to date. No action required. [...]\n## Summary ##################################################################### 90 components verified in 15 directives\n  => 62 components in Enforce mode\n      -> 48 compliant\n      -> 13 not-applicable\n      -> 1 error\n  => 28 components in Audit mode\n      -> 15 compliant\n      -> 3 not-applicable\n      -> 10 non-compliant\nExecution time: 8.89s ################################################################################"
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Learn more about Rudder.",
    "url": "https://docs.rudder.io"
  },
  "info": {
    "contact": {
      "email": "dev@rudder.io",
      "name": "Rudder developers",
      "url": "https://www.rudder.io"
    },
    "description": "# Introduction\n\n\nRudder exposes a REST API, enabling the user to interact with Rudder without using the webapp, for example in scripts or cronjobs.\n\n\n## Versioning\n\nEach time the API is extended with new features (new functions, new parameters, new responses, ...), it will be assigned a new version number. This will allow you\nto keep your existing scripts (based on previous behavior). Versions will always be integers (no 2.1 or 3.3, just 2, 3, 4, ...) or `latest`.\n\nYou can change the version of the API used by setting it either within the url or in a header:\n\n* the URL: each URL is prefixed by its version id, like `/api/version/function`.\n\n\n    # Version 10\n    curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/10/rules\n    # Latest\n    curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n    # Wrong (not an integer) => 404 not found\n    curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/3.14/rules\n\n\n* the HTTP headers. You can add the **X-API-Version** header to your request. The value needs to be an integer or `latest`.\n\n\n    # Version 10\n    curl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 10\" https://rudder.example.com/rudder/api/rules\n    # Wrong => Error response indicating which versions are available\n    curl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 3.14\" https://rudder.example.com/rudder/api/rules\n\n\nIn the future, we may declare some versions as deprecated, in order to remove them in a later version of Rudder, but we will never remove any versions without warning, or without a safe\nperiod of time to allow migration from previous versions.\n\n\n<h4>Existing versions</h4>\n<table>\n  <thead>\n    <tr>\n      <th style=\"width: 20%\">Version</th>\n      <th style=\"width: 20%\">Rudder versions it appeared in</th>\n      <th style=\"width: 70%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"code\">1</td>\n      <td class=\"code\">Never released (for internal use only)</td>\n      <td>Experimental version</td>\n    </tr>\n    <tr>\n      <td class=\"code\">2 to 10 (deprecated)</td>\n      <td class=\"code\">4.3 and before</td>\n      <td>These versions provided the core set of API features for rules, directives, nodes global parameters, change requests and compliance, rudder settings and system API</td>\n    </tr>\n    <tr>\n      <td class=\"code\">11</td>\n      <td class=\"code\">5.0</td>\n      <td>New system API (replacing old localhost v1 api): status, maintenance operations and server behavior</td>\n    </tr>\n    <tr>\n      <td class=\"code\">12</td>\n      <td class=\"code\">6.0</td>\n      <td>Node key management</td>\n    </tr>\n\n  </tbody>\n</table>\n\n\n## Response format\n\nAll responses from the API are in the JSON format.\n\n\n    {\n      \"action\": The name of the called function,\n      \"id\": The ID of the element you want, if relevant,\n      \"result\": The result of your action: success or error,\n      \"data\": Only present if this is a success and depends on the function, it's usually a JSON object,\n      \"errorDetails\": Only present if this is an error, it contains the error message\n    }\n\n\n\n* __Success__ responses are sent with the 200 HTTP (Success) code\n\n* __Error__ responses are sent with a HTTP error code (mostly 5xx...)\n\n\n## HTTP method\n\nRudder's REST API is based on the usage of [HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html). We use them to indicate what action will be done by the request. Currently, we use four of them:\n\n\n* **GET**: search or retrieve information (get rule details, get a group, ...)\n\n* **PUT**: add new objects (create a directive, clone a Rule, ...)\n\n* **DELETE**: remove objects (delete a node, delete a parameter, ...)\n\n* **POST**: update existing objects (update a directive, reload a group, ...)\n\n\n## Parameters\n\nTo use Rudder API, you may need to pass data attributes to the API. Most of them depends on the called function and will be described below, in the corresponding function's section. Some are common to almost all functions and are described here:\n\n### Passing parameters\n\nParameters to the API can be sent:\n\n\n* As part of the URL\n\n* As request arguments\n\n* Directly in JSON format\n\n\n#### As part of the URL\n\nParameters in URLs are used to indicate which data you want to interact with. The function will not work if this data is missing.\n\n\n    # Get the Rule of ID \"id\"\n    curl -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules/id\n\n\n#### Request parameters\n\nIn most cases, data will be sent using request parameters. for all data you want to change, you need to pass one parameter.\n\nParameters follow the following schema:\n\n\n    key=value\n\n\nYou can pass parameters by two means:\n\n* As query parameters: At the end of your url, put a **?** then your first parameter and then a **&** before next parameters\n\n\n    # Update the Rule 'id' with a new name, disabled, and setting it one directive \n    curl -X POST -H \"X-API-Token: yourToken\"  https://rudder.example.com/rudder/api/rules/latest/{id}?\"displayName=my new name\"&\"enabled=false\"&\"directives=aDirectiveId\"\n\n\n* As request data: You can pass those parameters in the request data, they won't figure in the URL, making it lighter to read, You can pass a file that contains data.\n\n\n    # Update the Rule 'id' with a new name, disabled, and setting it one directive (in file directive-info.json)\n    curl -X POST -H \"X-API-Token: yourToken\"\n    https://rudder.example.com/rudder/api/rules/latest/{id} -d \"displayName=my new name\" -d \"enabled=false\" -d @directive-info.json\n\n\n#### Directly in JSON format\n\nInstead of passing parameters one by one, you can instead supply a JSON object containing all you want to do. You'll also have to set the *Content-Type* header to **application/json** (without it the JSON content would be ignored).\n\nThe supplied file must contain a valid JSON: strings need quotes, booleans and integers\ndon't, ...\n\nThe (human readable) format is:\n\n\n    {\n      \"key1\": \"value1\",\n      \"key2\": false,\n      \"key3\": 42\n    }\n\n\nHere is an example with inlined data:\n\n\n\n    # Update the Rule 'id' with a new name, disabled, and setting it one directive\n    curl -X POST -H \"X-API-Token: yourToken\" -H  \"Content-Type: application/json\"\n      https://rudder.example.com/rudder/api/rules/latest/{id} \n      -d '{ \"displayName\": \"new name\", \"enabled\": false, \"directives\": \"directiveId\"}'\n\n\n\nYou can also pass a supply the JSON in a file:\n\n\n    # Update the Rule 'id' with a new name, disabled, and setting it one directive \n    curl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" https://rudder.example.com/rudder/api/rules/latest/{id} -d @jsonParam\n\n\nNote that some parameters cannot be passed in a JSON (general parameters, it will be precised when necessary), and you will need to pass them a URL parameters if you want them to be taken into account (you can't mix JSON and request parameters)\n\n\n    # Update the Rule 'id' with a new name, disabled, and setting it one directive with reason message \"Reason used\" \n    curl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" \"https://rudder.example.com/rudder/api/rules/latest/{id}?reason=Reason used\" -d @jsonParam -d \"reason=Reason ignored\"\n\n\n### General parameters\n\nSome parameters are available for almost all API functions. They will be described in this section.\nThey must be part of the query and can't be submitted in a JSON form.\n\n#### Available for all requests\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"width: 30%\">Field</th>\n      <th style=\"width: 10%\">Type</th>\n      <th style=\"width: 70%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"code\">prettify</td>\n      <td><b>boolean</b><br><i>optional</i></td>\n      <td>\n        Determine if the answer should be prettified (human friendly) or not. We recommend using this for debugging purposes, but not for general script usage as this does add some unnecessary load on the server side.\n        <p class=\"default-value\">Default value: <code>false</code></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n#### Available for modification requests (PUT/POST/DELETE)\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"width: 25%\">Field</th>\n      <th style=\"width: 12%\">Type</th>\n      <th style=\"width: 70%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"code\">reason</td>\n      <td><b>string</b><br><i>optional</i> or <i>required</i></td>\n      <td>\n        Set a message to explain the change. If you set the reason messages to be mandatory in the web interface, failing to supply this value will lead to an error.\n        <p class=\"default-value\">Default value: <code>\"\"</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"code\">changeRequestName</td>\n      <td><b>string</b><br><i>optional</i></td>\n      <td>\n        Set the change request name, is used only if workflows are enabled. The default value depends on the function called\n        <p class=\"default-value\">Default value: <code>A default string for each function</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"code\">changeRequestDescription</td>\n      <td><b>string</b><br><i>optional</i></td>\n      <td>\n        Set the change request description, is used only if workflows are enabled.\n        <p class=\"default-value\">Default value: <code>\"\"</code></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "license": {
      "name": "CC-BY-SA 2.0",
      "url": "https://spdx.org/licenses/CC-BY-SA-2.0.html"
    },
    "title": "Rudder API",
    "version": "12",
    "x-logo": {
      "url": "assets/rudder.png"
    }
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/changeRequests": {
      "get": {
        "summary": "List all change requests",
        "description": "List all change requests",
        "operationId": "listChangeRequests",
        "responses": {
          "200": {
            "description": "Change requests information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listChangeRequests"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/change-request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Change requests"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\""
          }
        ]
      }
    },
    "/changeRequests/{changeRequestId}": {
      "get": {
        "summary": "Get a change request details",
        "description": "Get a change request details",
        "operationId": "changeRequestDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/change-request-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Change requests information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "changeRequestDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/change-request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Change requests"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\""
          }
        ]
      },
      "delete": {
        "summary": "Decline a request details",
        "description": "Refuse a change request",
        "operationId": "declineChangeRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/change-request-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Change requests information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "declineChangeRequest"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/change-request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Change requests"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/changeRequests/43"
          }
        ]
      },
      "post": {
        "summary": "Update a request details",
        "description": "Update a change request",
        "operationId": "updateChangeRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/change-request-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Change request name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Change request description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change requests information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateChangeRequest"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/change-request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Change requests"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/changeRequests/42  --data \"name=new Name of change request\" -d \"description=add a new description\""
          }
        ]
      }
    },
    "/changeRequests/{changeRequestId}/accept": {
      "post": {
        "summary": "Accept a request details",
        "description": "Accept a change request",
        "operationId": "acceptChangeRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/change-request-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New status of the change request",
                    "enum": [
                      "pending deployment",
                      "deployed"
                    ],
                    "example": "deployed"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change requests information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "acceptChangeRequest"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/change-request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Change requests"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\""
          }
        ]
      }
    },
    "/compliance": {
      "get": {
        "summary": "Global compliance",
        "description": "Get current global compliance of a Rudder server",
        "operationId": "getGlobalCompliance",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ],
                      "example": "success"
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getGlobalCompliance"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "globalCompliance"
                      ],
                      "properties": {
                        "globalCompliance": {
                          "type": "object",
                          "required": [
                            "compliance"
                          ],
                          "properties": {
                            "compliance": {
                              "type": "number",
                              "format": "integer",
                              "description": "Global compliance level (`-1` when no policies are defined)",
                              "example": 57
                            },
                            "complianceDetails": {
                              "type": "object",
                              "properties": {
                                "successAlreadyOK": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 48.68
                                },
                                "noReport": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 36.18
                                },
                                "successNotApplicable": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 5.92
                                },
                                "unexpectedMissingComponent": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 2.63
                                },
                                "error": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 1.32
                                },
                                "unexpectedUnknownComponent": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 2.63
                                },
                                "successRepaired": {
                                  "type": "number",
                                  "format": "float",
                                  "example": 2.63
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Compliance"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance?prettify=true'"
          }
        ]
      }
    },
    "/compliance/nodes": {
      "get": {
        "summary": "Compliance details for all nodes",
        "description": "Get current compliance of all the nodes of a Rudder server",
        "operationId": "getNodesCompliance",
        "parameters": [
          {
            "$ref": "#/components/parameters/compliance-level"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ],
                      "example": "success"
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getNodesCompliance"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "mode",
                              "compliance",
                              "complianceDetails"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "id of the node",
                                "example": "f37f4928-fcb5-4acf-a422-d40f123a9670"
                              },
                              "mode": {
                                "type": "string",
                                "enum": [
                                  "full-compliance",
                                  "changes-only",
                                  "reports-disabled"
                                ]
                              },
                              "compliance": {
                                "type": "number",
                                "format": "float",
                                "description": "Rule compliance level",
                                "example": 57.43
                              },
                              "complianceDetails": {
                                "type": "object",
                                "properties": {
                                  "successAlreadyOK": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 48.68
                                  },
                                  "noReport": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 36.18
                                  },
                                  "successNotApplicable": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 5.92
                                  },
                                  "unexpectedMissingComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "error": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1.32
                                  },
                                  "unexpectedUnknownComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "successRepaired": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Compliance"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/compliance/nodes?level=2'"
          }
        ]
      }
    },
    "/compliance/nodes/{nodeId}": {
      "get": {
        "summary": "Compliance details by node",
        "description": "Get current compliance of a node of a Rudder server",
        "operationId": "getNodeCompliance",
        "parameters": [
          {
            "$ref": "#/components/parameters/compliance-level"
          },
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ],
                      "example": "success"
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getNodeCompliance"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "mode",
                              "compliance",
                              "complianceDetails"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "id of the node",
                                "example": "f37f4928-fcb5-4acf-a422-d40f123a9670"
                              },
                              "mode": {
                                "type": "string",
                                "enum": [
                                  "full-compliance",
                                  "changes-only",
                                  "reports-disabled"
                                ]
                              },
                              "compliance": {
                                "type": "number",
                                "format": "float",
                                "description": "Rule compliance level",
                                "example": 57.43
                              },
                              "complianceDetails": {
                                "type": "object",
                                "properties": {
                                  "successAlreadyOK": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 48.68
                                  },
                                  "noReport": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 36.18
                                  },
                                  "successNotApplicable": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 5.92
                                  },
                                  "unexpectedMissingComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "error": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1.32
                                  },
                                  "unexpectedUnknownComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "successRepaired": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Compliance"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/compliance/nodes/root?level=1'"
          }
        ]
      }
    },
    "/compliance/rules": {
      "get": {
        "summary": "Compliance details for all rules",
        "description": "Get current compliance of all the rules of a Rudder server",
        "operationId": "getRulesCompliance",
        "parameters": [
          {
            "$ref": "#/components/parameters/compliance-level"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ],
                      "example": "success"
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getRulesCompliance"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "mode",
                              "compliance",
                              "complianceDetails"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "id of the rule",
                                "example": "f37f4928-fcb5-4acf-a422-d40f123a9670"
                              },
                              "mode": {
                                "type": "string",
                                "enum": [
                                  "full-compliance",
                                  "changes-only",
                                  "reports-disabled"
                                ]
                              },
                              "compliance": {
                                "type": "number",
                                "format": "float",
                                "description": "Rule compliance level",
                                "example": 57.43
                              },
                              "complianceDetails": {
                                "type": "object",
                                "properties": {
                                  "successAlreadyOK": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 48.68
                                  },
                                  "noReport": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 36.18
                                  },
                                  "successNotApplicable": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 5.92
                                  },
                                  "unexpectedMissingComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "error": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1.32
                                  },
                                  "unexpectedUnknownComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "successRepaired": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Compliance"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance/rules?level=2'"
          }
        ]
      }
    },
    "/compliance/rules/{ruleId}": {
      "get": {
        "summary": "Compliance details by rule",
        "description": "Get current compliance of a rule of a Rudder server",
        "operationId": "getRuleCompliance",
        "parameters": [
          {
            "$ref": "#/components/parameters/compliance-level"
          },
          {
            "$ref": "#/components/parameters/rule-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ],
                      "example": "success"
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getRuleCompliance"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "mode",
                              "compliance",
                              "complianceDetails"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "id of the rule",
                                "example": "f37f4928-fcb5-4acf-a422-d40f123a9670"
                              },
                              "mode": {
                                "type": "string",
                                "enum": [
                                  "full-compliance",
                                  "changes-only",
                                  "reports-disabled"
                                ]
                              },
                              "compliance": {
                                "type": "number",
                                "format": "float",
                                "description": "Rule compliance level",
                                "example": 57.43
                              },
                              "complianceDetails": {
                                "type": "object",
                                "properties": {
                                  "successAlreadyOK": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 48.68
                                  },
                                  "noReport": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 36.18
                                  },
                                  "successNotApplicable": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 5.92
                                  },
                                  "unexpectedMissingComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "error": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1.32
                                  },
                                  "unexpectedUnknownComponent": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  },
                                  "successRepaired": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 2.63
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Compliance"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance/rules?level=2'"
          }
        ]
      }
    },
    "/datasources": {
      "get": {
        "summary": "List all data sources",
        "description": "Get the configuration of all present data sources",
        "operationId": "getAllDataSources",
        "responses": {
          "200": {
            "description": "Data sources information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getAllDataSources"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "datasources"
                      ],
                      "properties": {
                        "datasources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/datasource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/datasources'"
          }
        ]
      },
      "put": {
        "summary": "Create a data source",
        "description": "Create a new data source",
        "operationId": "createDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/datasource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "createDataSource"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the data sources",
                      "required": [
                        "datasources"
                      ],
                      "properties": {
                        "datasources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/datasource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/datasources --header \"Content-type: application/json\" --data @datasources.json"
          }
        ]
      }
    },
    "/datasources/reload": {
      "post": {
        "summary": "Update properties from data sources",
        "description": "Update properties from all data source on all nodes. The call is asynchronous.",
        "operationId": "ReloadAllDatasourcesAllNodes",
        "responses": {
          "200": {
            "description": "Data source reloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "ReloadAllDatasourcesAllNodes"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Data for all nodes, for all configured data sources are going to be updated"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/reload"
          }
        ]
      }
    },
    "/datasources/reload/{datasourceId}": {
      "post": {
        "summary": "Update properties from data sources",
        "description": "Update properties from all data source on all nodes. The call is asynchronous.",
        "operationId": "ReloadOneDatasourceAllNodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Data source reloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "ReloadOneDatasourceAllNodes"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Data for all nodes, for the 'test-data-source' data source are going to be updated"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/reload/datasourceId"
          }
        ]
      }
    },
    "/datasources/{datasourceId}": {
      "get": {
        "summary": "Get data source configuration",
        "description": "Get the configuration of a data source",
        "operationId": "getDataSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Data source information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getDataSource"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "datasources"
                      ],
                      "properties": {
                        "datasources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/datasource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/datasources/my-data-source"
          }
        ]
      },
      "post": {
        "summary": "Update a data source configuration",
        "description": "Update the configuration of a data source",
        "operationId": "updateDataSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource-id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/datasource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data source information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateDataSource"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "datasources"
                      ],
                      "properties": {
                        "datasources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/datasource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "cat disable-datasource-1.json.json\n{\n  \"description\": \"This data source is temporarly no more used and so disabled\",\n  \"enabled\": false\n}\n\ncurl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/my-data-source --header \"Content-type: application/json\" --data @disable-datasource-1.json.json"
          }
        ]
      },
      "delete": {
        "summary": "Delete a data source",
        "description": "Delete a data source configuration",
        "operationId": "deleteDataSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/datasource-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Data source information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteDataSource"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "datasources"
                      ],
                      "properties": {
                        "datasources": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/datasource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/datasources/my-data-source"
          }
        ]
      }
    },
    "/directives": {
      "get": {
        "summary": "List all directives",
        "description": "List all directives",
        "operationId": "listDirectives",
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listDirectives"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/directives"
          }
        ]
      },
      "put": {
        "summary": "Create a directive",
        "description": "Create a new directive from provided parameters. You can specify a source directive to clone it.",
        "operationId": "createDirective",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/directive-new"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "createDirective"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "directives.json:\n\n{\n  \"id\": \"cf2a6c72-18ae-4f82-a12c-0b887792db41\",\n  \"displayName\": \"Example Directive\",\n  \"shortDescription\": \"This in an example Directive to use in Rudder api documentation\",\n  \"longDescription\": \"\",\n  \"techniqueName\": \"genericVariableDefinition\",\n  \"techniqueVersion\": \"2.0\",\n  \"tags\": {\n    \"env\" : \"production\",\n    \"country\" : \"FR\"\n  },\n  \"parameters\": {\n    \"section\": {\n      \"name\": \"sections\",\n      \"sections\": [\n        {\n          \"section\": {\n            \"name\": \"Variable definition\",\n            \"vars\": [\n              {\n                \"var\": {\n                  \"name\": \"GENERIC_VARIABLE_CONTENT\",\n                  \"value\": \"new variable content\"\n                }\n              },\n              {\n                \"var\": {\n                  \"name\": \"GENERIC_VARIABLE_NAME\",\n                  \"value\": \"new_variable\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"priority\": 3,\n  \"enabled\": true,\n  \"system\": false,\n  \"policyMode\": \"default\"\n}\n\ncurl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/directives --header \"Content-type: application/json\" --data @directive.json\n\n"
          }
        ]
      }
    },
    "/directives/{directiveId}": {
      "get": {
        "summary": "Get directive details",
        "description": "Get all information about a given directive",
        "operationId": "directiveDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/directive-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "directiveDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7"
          }
        ]
      },
      "delete": {
        "summary": "Delete a directive",
        "description": "Delete a directive",
        "operationId": "deleteDirective",
        "parameters": [
          {
            "$ref": "#/components/parameters/directive-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteDirective"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7"
          }
        ]
      },
      "post": {
        "summary": "Update a directive details",
        "description": "Update directive information",
        "operationId": "updateDirective",
        "parameters": [
          {
            "$ref": "#/components/parameters/directive-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/directive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateDirective"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "directive.json:\n{\n  \"longDescription\": \"Add a loooooooooooong description\",\n  \"parameters\": {\n    \"section\": {\n      \"name\": \"sections\",\n      \"sections\": [\n        {\n          \"section\": {\n            \"name\": \"Variable definition\",\n            \"vars\": [\n              {\n                \"var\": {\n                  \"name\": \"GENERIC_VARIABLE_CONTENT\",\n                  \"value\": \"Change Variable Content\"\n                }\n              },\n              {\n                \"var\": {\n                  \"name\": \"GENERIC_VARIABLE_NAME\",\n                  \"value\": \"new_variable\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"priority\": 5\n}\n\ncurl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/directives/cf2a6c72-18ae-4f82-a12c-0b887792db41 --header \"Content-type: application/json\" --data @directive.json"
          }
        ]
      }
    },
    "/directives/{directiveId}/check": {
      "post": {
        "summary": "Check that update on a directive is valid",
        "description": "Check that update on a directive is valid",
        "operationId": "checkDirective",
        "parameters": [
          {
            "$ref": "#/components/parameters/directive-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/directive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Directives information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "checkDirective"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Directives"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7/check  --data \"displayName=Name of new directive\""
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "summary": "List all groups",
        "description": "List all groups",
        "operationId": "listGroups",
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listGroups"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/groups"
          }
        ]
      },
      "put": {
        "summary": "Create a group",
        "description": "Create a new group based in provided parameters",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "createGroup"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group-new"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "groups.json:\n{\n \"category\": \"c355f46e-11b0-4c7a-aedd-6a5f3b0303b6\",\n \"displayName\": \"Example group\",\n \"description\": \"This is an example Group to use in Rudder api documentation\",\n \"query\":\n   {\"select\":\"node\",\"composition\":\"Or\",\"where\":\n     [\n       {\"objectType\":\"node\",\"attribute\":\"nodeId\",\"comparator\":\"eq\",\"value\":\"1ae6ccfe-00ba-44c0-b1aa-362d2f386032\"},\n       {\"objectType\":\"node\",\"attribute\":\"nodeId\",\"comparator\":\"eq\",\"value\":\"e4a80fd8-373e-45fc-ad94-2ae618be32e3\"}\n     ]\n   },\n  \"dynamic\": true,\n  \"enabled\": true\n}\n\ncurl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/groups --header \"Content-Type: application/json\" --data @group.json\n\n"
          }
        ]
      }
    },
    "/groups/categories": {
      "put": {
        "summary": "Create a group category",
        "description": "Create a new group category",
        "operationId": "CreateGroupCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/group-category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Groups category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "CreateGroupCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request PUT 'https://rudder.example.com/rudder/api/latest/groups/categories' --data \"name=new category name\" -d \"parent=4306143d-eabf-4478-b7b1-1616f4aa02b5\" -d \"description=A new category created via API'\n"
          }
        ]
      }
    },
    "/groups/categories/{groupCategoryId}": {
      "get": {
        "summary": "Get group category details",
        "description": "Get detailed information about a group category",
        "operationId": "GetGroupCategoryDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-category-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "GetGroupCategoryDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5'"
          }
        ]
      },
      "delete": {
        "summary": "Delete group category",
        "description": "Delete a group category. It must have no child groups and no children categories.",
        "operationId": "DeleteGroupCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-category-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "DeleteGroupCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5'"
          }
        ]
      },
      "post": {
        "summary": "Update group category details",
        "description": "Update detailed information about a group category",
        "operationId": "UpdateGroupCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-category-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/group-category-update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Groups category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "UpdateGroupCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5' --data \"name=new category name\"\n"
          }
        ]
      }
    },
    "/groups/tree": {
      "get": {
        "summary": "Get groups tree",
        "description": "Get all available groups and their categories in a tree",
        "operationId": "GetGroupTree",
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "GetGroupTree"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "object",
                          "description": "Group tree",
                          "example": null
                        }
                      },
                      "example": {
                        "id": "GroupRoot",
                        "name": "Root of the group and group categories",
                        "description": "This is the root category for the groups (both dynamic and static) and group categories",
                        "parent": "GroupRoot",
                        "categories": [
                          {
                            "id": "SystemGroups",
                            "name": "System groups",
                            "description": "That category holds all the system and special target",
                            "parent": "GroupRoot",
                            "categories": [],
                            "groups": [
                              {
                                "id": "hasPolicyServer-root",
                                "displayName": "All nodes managed by root policy server",
                                "description": "All nodes known by Rudder directly connected to the root server",
                                "query": {
                                  "select": "nodeAndPolicyServer",
                                  "composition": "And",
                                  "where": [
                                    {
                                      "objectType": "node",
                                      "attribute": "policyServerId",
                                      "comparator": "eq",
                                      "value": "root"
                                    }
                                  ]
                                },
                                "nodeIds": [
                                  "dd404bda-2785-4959-abaa-8f37a0bbd85e",
                                  "f6223b0e-e2aa-4d1f-b6d1-74de8ea8e513",
                                  "root"
                                ],
                                "dynamic": true,
                                "enabled": true
                              }
                            ]
                          },
                          {
                            "id": "38dd2107-a73b-45fb-916d-e110312abb87",
                            "name": "production groups",
                            "description": "",
                            "parent": "GroupRoot",
                            "categories": [],
                            "groups": [
                              {
                                "id": "79d83ff9-24d8-4be6-b1f7-cbb1c173f7a5",
                                "displayName": "Linux nodes",
                                "description": "",
                                "query": {
                                  "select": "node",
                                  "composition": "And",
                                  "where": [
                                    {
                                      "objectType": "node",
                                      "attribute": "OS",
                                      "comparator": "eq",
                                      "value": "Linux"
                                    }
                                  ]
                                },
                                "nodeIds": [],
                                "dynamic": false,
                                "enabled": true
                              }
                            ]
                          }
                        ],
                        "groups": [
                          {
                            "id": "af208515-c2f2-4577-bbf4-9fffebbe6629",
                            "displayName": "Test Clients",
                            "description": "",
                            "query": {
                              "select": "node",
                              "composition": "Or",
                              "where": [
                                {
                                  "objectType": "node",
                                  "attribute": "nodeHostname",
                                  "comparator": "regex",
                                  "value": "servername.*company.net"
                                },
                                {
                                  "objectType": "node",
                                  "attribute": "nodeHostname",
                                  "comparator": "regex",
                                  "value": "lt serverbla.*company.net"
                                }
                              ]
                            },
                            "nodeIds": [],
                            "dynamic": true,
                            "enabled": true
                          },
                          {
                            "id": "d7634b2d-7189-422b-9971-24c29b75da46",
                            "displayName": "Test Clients",
                            "description": "",
                            "query": {
                              "select": "node",
                              "composition": "Or",
                              "where": [
                                {
                                  "objectType": "node",
                                  "attribute": "nodeHostname",
                                  "comparator": "regex",
                                  "value": "servername.*company.net"
                                },
                                {
                                  "objectType": "node",
                                  "attribute": "nodeHostname",
                                  "comparator": "regex",
                                  "value": "lt serverbla.*company.net"
                                }
                              ]
                            },
                            "nodeIds": [],
                            "dynamic": true,
                            "enabled": true
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/groups/tree\n"
          }
        ]
      }
    },
    "/groups/{groupId}": {
      "get": {
        "summary": "Get group details",
        "description": "Get detailed information about a group",
        "operationId": "groupDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "groupDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7'"
          }
        ]
      },
      "post": {
        "summary": "Update group details",
        "description": "Update detailed information about a group",
        "operationId": "updateGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/group-update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateGroup"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7' --data \"displayName=New name of group\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a group",
        "description": "Update detailed information about a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteGroup"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7'"
          }
        ]
      }
    },
    "/groups/{groupId}/reload": {
      "post": {
        "summary": "Reload a group",
        "description": "Recompute the content of a group",
        "operationId": "reloadGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "reloadGroup"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Groups"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7/reload'"
          }
        ]
      }
    },
    "/inventories/info": {
      "get": {
        "summary": "Get information about inventory processing queue",
        "description": "Provide information about the current state of the inventory processor",
        "operationId": "queueInformation",
        "responses": {
          "200": {
            "description": "Inventories information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "queueInformation"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the service",
                      "required": [
                        "queueMaxSize",
                        "queueSaturated"
                      ],
                      "properties": {
                        "queueMaxSize": {
                          "type": "integer",
                          "example": 50
                        },
                        "queueSaturated": {
                          "type": "boolean",
                          "description": "Is the inventory queue full",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inventories"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/"
          }
        ]
      }
    },
    "/inventories/upload": {
      "post": {
        "summary": "Upload an inventory for processing",
        "description": "Upload an inventory to the web application",
        "operationId": "uploadInventory",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "signature": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "uploadInventory"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Inventory 'file.xml' for Node 'c1bab9fc-bcf6-4d59-a397-84c8e2fc06c0' added to processing queue."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inventories"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --request POST --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/inventories/upload -F \"file=@inventory-file\" -F \"signature=@signature-file\""
          }
        ]
      }
    },
    "/inventories/watcher/restart": {
      "post": {
        "summary": "Restart inventory watcher",
        "description": "Restart the inventory watcher if necessary",
        "operationId": "fileWatcherRestart",
        "responses": {
          "200": {
            "description": "Started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "fileWatcherRestart"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Incoming inventory watcher restarted"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inventories"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/restart'"
          }
        ]
      }
    },
    "/inventories/watcher/start": {
      "post": {
        "summary": "Start inventory watcher",
        "description": "Start the inventory watcher if necessary",
        "operationId": "fileWatcherStart",
        "responses": {
          "200": {
            "description": "Started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "fileWatcherStart"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Incoming inventory watcher started"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inventories"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/start'"
          }
        ]
      }
    },
    "/inventories/watcher/stop": {
      "post": {
        "summary": "Stop inventory watcher",
        "description": "Stop the inventory watcher if necessary",
        "operationId": "fileWatcherStop",
        "responses": {
          "200": {
            "description": "Stopped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "fileWatcherStop"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Incoming inventory watcher stopped"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inventories"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/stop'"
          }
        ]
      }
    },
    "/nodes": {
      "get": {
        "summary": "List managed nodes",
        "description": "Get information about the nodes managed by the target server",
        "operationId": "listAcceptedNodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/node-query"
          },
          {
            "$ref": "#/components/parameters/node-where"
          },
          {
            "$ref": "#/components/parameters/node-composition"
          },
          {
            "$ref": "#/components/parameters/node-select"
          }
        ],
        "responses": {
          "200": {
            "description": "Nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listAcceptedNodes"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the nodes",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/node-full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" 'https://rudder.example.com/rudder/api/latest/nodes?where=\\[\\{\"objectType\":\"node\",\"attribute\":\"OS\",\"comparator\":\"eq\",\"value\":\"Linux\"\\},\\{\"objectType\":\"node\",\"attribute\":\"nodeHostname\",\"comparator\":\"regex\",\"value\":\"node1.*\"\\}\\]'"
          },
          {
            "lang": "python",
            "source": "import json\nimport requests\n\n# Get all nodes having a hostname starting with node1 and based on Linux and only display minimal information (id, hostname, status)\nurl = \"https://rudder.example.com/rudder/api/latest/nodes\"\nlinux = {\"objectType\": \"node\", \"attribute\": \"OS\",\n         \"comparator\": \"eq\", \"value\": \"Linux\"}\nnode1 = {\"objectType\": \"node\", \"attribute\": \"nodeHostname\",\n         \"comparator\": \"regex\", \"value\": \"node1.*\"}\nwhere = [linux, node1]\nparams = {\"where\": json.dumps(where), \"include\": \"minimal\"}\nheaders = {\"X-API-TOKEN\": \"yourToken\"}\nrequests.get(url, params=params, headers=headers, verify=False)\n"
          }
        ]
      }
    },
    "/nodes/applyPolicy": {
      "post": {
        "summary": "Trigger a agent runs",
        "description": "This API allows to trigger an agent run on the target node. Response contains a json stating if agent could be started on each node, but not if the run went fine and do not display any output from it. You can see the result of the run in Rudder web interface or in the each agent logs.",
        "operationId": "applyPolicyAllNodes",
        "responses": {
          "200": {
            "description": "Result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "applyPolicyAllNodes"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid (or \"root\")",
                            "example": "249e14ac-2418-457c-a27d-1650907b13c7",
                            "description": "Rudder id of the node"
                          },
                          "hostname": {
                            "type": "string",
                            "example": "node.example.com",
                            "description": "Node hostname"
                          },
                          "result": {
                            "type": "string",
                            "description": "Result or policy application trigger",
                            "example": "Started"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/applyPolicy"
          }
        ]
      }
    },
    "/nodes/pending/{nodeId}": {
      "post": {
        "summary": "Update pending Node status",
        "description": "Accept or refuse a pending node",
        "operationId": "changePendingNodeStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New status of the pending node",
                    "enum": [
                      "accepted",
                      "refused"
                    ],
                    "example": "accepted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "changePendingNodeStatus"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the node",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/node-full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/pending/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data \"status=accepted\""
          }
        ]
      }
    },
    "/nodes/{nodeId}": {
      "get": {
        "summary": "Get information about a node",
        "description": "Get details about a given node",
        "operationId": "nodeDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "nodeDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the node",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/node-full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\\?include=full"
          }
        ]
      },
      "post": {
        "summary": "Update node settings and properties",
        "description": "Update node settings and properties",
        "operationId": "updateNode",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node-settings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateNode"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the node",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/node-full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Given the \"data.json\" JSON file with content:\n{ \"properties\": [\n  { \"name\": \"env_type\"    , \"value\": \"production\" },\n  { \"name\": \"shell\"       , \"value\": \"/bin/sh\" },\n  { \"name\": \"utf-8 poetry\", \"value\": \"ᚠᛇᚻ᛫ᛒᛦᚦ᛫ᚠᚱᚩᚠᚢᚱ᛫ᚠᛁᚱᚪ᛫ᚷᛖᚻᚹᛦᛚᚳᚢᛗ\" }\n]\n, \"policyMode\" : \"audit\"\n}\n# Setting properties from \"data.json\" and policy mode to audit:\ncurl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data @properties.json\n\n# Removing the key \"utf-8 poetry\" from the command line and updating the \"env_type\" one\ncurl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data '{ \"properties\": [{ \"name\":\"utf-8 poetry\", \"value\":\"\"}, {\"name\":\"env_type\", \"value\":\"deprovisioned\"}] }'\n\n# Removing the key \"env_type\" and changing \"shell\" and use default policy mode\ncurl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data \"properties=shell=/bin/false\" -d \"properties=env_type=\" -d \"policyMode=default\"\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete a node",
        "description": "Remove a node from the Rudder server. It won't be managed anymore.",
        "operationId": "deleteNode",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteNode"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the node",
                      "required": [
                        "nodes"
                      ],
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/node-full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\n"
          }
        ]
      }
    },
    "/nodes/{nodeId}/applyPolicy": {
      "post": {
        "summary": "Trigger an agent run",
        "description": "This API allows to trigger an agent run on the target node. Response is a stream of the actual agent run on the node.",
        "operationId": "applyNode",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/agent-output"
          }
        },
        "tags": [
          "Nodes"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\\?include=full"
          }
        ]
      }
    },
    "/nodes/{nodeId}/fetchData": {
      "post": {
        "summary": "Update properties for one node from all data sources",
        "description": "Update properties from all data sources on one nodes. The call is asynchronous.",
        "operationId": "ReloadAllDatasourcesOneNode",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Data sources reloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "ReloadAllDatasourcesOneNode"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Data for node '4e3336f9-ace8-44d6-8d07-496ff1631b01', for all configured data sources, is going to be updated"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7/fetchData"
          }
        ]
      }
    },
    "/nodes/{nodeId}/fetchData/{datasourceId}": {
      "post": {
        "summary": "Update properties for one node from a data source",
        "description": "Update properties from a data source on one nodes. The call is asynchronous.",
        "operationId": "ReloadOneDatasourceOneNode",
        "parameters": [
          {
            "$ref": "#/components/parameters/node-id"
          },
          {
            "$ref": "#/components/parameters/datasource-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Data sources reloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "ReloadOneDatasourceOneNode"
                      ]
                    },
                    "data": {
                      "type": "string",
                      "example": "Data for node '4e3336f9-ace8-44d6-8d07-496ff1631b01', for ' test-data-source' data source, is going to be updated"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "🧩 Data sources"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/nodeId/fetchData/datasourceId"
          }
        ]
      }
    },
    "/parameters": {
      "get": {
        "summary": "List all global parameters",
        "description": "Get the current value of all the global parameters",
        "operationId": "listParameters",
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listParameters"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Parameters",
                      "required": [
                        "parameters"
                      ],
                      "properties": {
                        "parameters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/parameter"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Parameters"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/parameters"
          }
        ]
      },
      "put": {
        "summary": "Create a new parameter",
        "description": "Create a new global parameter",
        "operationId": "createParameter",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/parameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the parameter",
                      "example": "rudder_file_edit_footer"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "createParameter"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Parameters",
                      "required": [
                        "parameters"
                      ],
                      "properties": {
                        "parameters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/parameter"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Parameters"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --header \"Content-Type: application/json\" --request PUT https://rudder.example.com/rudder/api/latest/parameters --data @JSON-file-name"
          }
        ]
      }
    },
    "/parameters/{parameterId}": {
      "get": {
        "summary": "Get the value of a parameter",
        "description": "Get the current value of a given parameter",
        "operationId": "parameterDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the parameter",
                      "example": "rudder_file_edit_footer"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "parameterDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Parameters",
                      "required": [
                        "parameters"
                      ],
                      "properties": {
                        "parameters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/parameter"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Parameters"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/parameters/ParameterId"
          }
        ]
      },
      "post": {
        "summary": "Update a parameter's value",
        "description": "Update the properties of a parameter",
        "operationId": "updateParameter",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the parameter",
                      "example": "rudder_file_edit_footer"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateParameter"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Parameters",
                      "required": [
                        "parameters"
                      ],
                      "properties": {
                        "parameters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/parameter"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Parameters"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/parameters/ParameterId --data \"value=### Edited by Rudder ###\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a parameter",
        "description": "Delete an existing parameter",
        "operationId": "deleteParameter",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameter-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the parameter",
                      "example": "rudder_file_edit_footer"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteParameter"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Parameters",
                      "required": [
                        "parameters"
                      ],
                      "properties": {
                        "parameters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/parameter"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Non existing parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the parameter",
                      "example": "rudder_file_edit_footer"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteParameter"
                      ]
                    },
                    "errorDetails": {
                      "type": "string",
                      "example": "Could not delete Parameter rudder_file_edit_footer cause is: Could not find Parameter rudder_file_edit_footer."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Parameters"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/parameters/ParameterId"
          }
        ]
      }
    },
    "/regenerate/policies": {
      "post": {
        "summary": "Trigger a new policy generation",
        "description": "Trigger a full policy generation",
        "operationId": "regeneratePolicies",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "regeneratePolicies"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "policies"
                      ],
                      "properties": {
                        "policies": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/regenerate/policies'"
          }
        ]
      }
    },
    "/reload/groups": {
      "post": {
        "summary": "Reload dynamic groups",
        "description": "Reload dynamic groups",
        "operationId": "reloadGroups",
        "responses": {
          "200": {
            "description": "Service reload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "reloadGroups"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload/groups'\n"
          }
        ]
      }
    },
    "/reload/techniques": {
      "post": {
        "summary": "Reload techniques",
        "description": "Reload techniques from local technique library",
        "operationId": "reloadTechniques",
        "responses": {
          "200": {
            "description": "Service reload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "reloadTechniques"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "techniques"
                      ],
                      "properties": {
                        "techniques": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload/techniques'\n"
          }
        ]
      }
    },
    "/rules": {
      "get": {
        "summary": "List all rules",
        "description": "List all rules",
        "operationId": "listRules",
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listRules"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/rules'"
          }
        ]
      },
      "put": {
        "summary": "Create a rule",
        "description": "Create a new rule. You can specify a source rule to clone it.",
        "operationId": "createRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule-new"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "createRule"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request PUT 'https://rudder.example.com/rudder/api/latest/rules' --data \"displayName=Name of New Rule\""
          }
        ]
      }
    },
    "/rules/categories": {
      "put": {
        "summary": "Create a rule category",
        "description": "Create a new rule category",
        "operationId": "CreateRuleCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/rule-category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rules category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "CreateRuleCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "ruleCategories"
                      ],
                      "properties": {
                        "ruleCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/rules/categories' --data \"name=new category\" -d \"parent=4306143d-eabf-4478-b7b1-1616f4aa02b5\" -d \"description=A new category created via API'"
          }
        ]
      }
    },
    "/rules/categories/{ruleCategoryId}": {
      "get": {
        "summary": "Get rule category details",
        "description": "Get detailed information about a rule category",
        "operationId": "GetRuleCategoryDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-category-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "GetRuleCategoryDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rulesCategories"
                      ],
                      "properties": {
                        "rulesCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true'"
          }
        ]
      },
      "delete": {
        "summary": "Delete group category",
        "description": "Delete a group category. It must have no child groups and no children categories.",
        "operationId": "DeleteRuleCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-category-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "DeleteRuleCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groupCategories"
                      ],
                      "properties": {
                        "groupCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true'"
          }
        ]
      },
      "post": {
        "summary": "Update rule category details",
        "description": "Update detailed information about a rule category",
        "operationId": "UpdateRuleCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-category-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/rule-category-update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rules category information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "UpdateRuleCategory"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "ruleCategories"
                      ],
                      "properties": {
                        "ruleCategories": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule-category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true' --data \"name=new category name\""
          }
        ]
      }
    },
    "/rules/tree": {
      "get": {
        "summary": "Get rules tree",
        "description": "Get all available rules and their categories in a tree",
        "operationId": "GetRuleTree",
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "GetRuleTree"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "ruleCategories"
                      ],
                      "properties": {
                        "ruleCategories": {
                          "type": "object",
                          "description": "Rule tree",
                          "example": null
                        }
                      },
                      "example": {
                        "id": "rootRuleCategory",
                        "name": "Rules",
                        "description": "This is the main category of Rules",
                        "parent": "rootRuleCategory",
                        "categories": [
                          {
                            "id": "4306143d-eabf-4478-b7b1-1616f4aa02b5",
                            "name": "Dev category",
                            "description": "",
                            "parent": "rootRuleCategory",
                            "categories": [
                              {
                                "id": "f45ec2fd-69f4-4669-9c22-1af3abe2a107",
                                "name": "Specific dev category",
                                "description": "",
                                "parent": "4306143d-eabf-4478-b7b1-1616f4aa02b5",
                                "categories": [],
                                "rules": [
                                  {
                                    "id": "b7fda4e7-3616-4e99-89b0-8ffadaf6b0f0",
                                    "displayName": "my specific Rule",
                                    "shortDescription": "",
                                    "longDescription": "",
                                    "directives": [],
                                    "targets": [],
                                    "enabled": true,
                                    "system": false
                                  }
                                ]
                              }
                            ],
                            "rules": [
                              {
                                "id": "f2aa50a9-961c-4cce-a266-380cffcdce32",
                                "displayName": "dev Rule",
                                "shortDescription": "",
                                "longDescription": "",
                                "directives": [],
                                "targets": [],
                                "enabled": true,
                                "system": false
                              }
                            ]
                          }
                        ],
                        "rules": [
                          {
                            "id": "43cde273-5bb0-466f-8850-7d3fdde03253",
                            "displayName": "Global security policy",
                            "shortDescription": "",
                            "longDescription": "",
                            "directives": [],
                            "targets": [],
                            "enabled": true,
                            "system": false
                          },
                          {
                            "id": "32377fd7-02fd-43d0-aab7-28460a91347b",
                            "displayName": "Global configuration for all nodes",
                            "shortDescription": "",
                            "longDescription": "This Rule was created automatically when Rudder was installed. It can be used to target Directives to all nodes (including the Rudder root server itself), or deleted if you would rather create your own set of Rules (it will never be created again).",
                            "directives": [
                              "bff45fe2-8233-4d28-96aa-78b0390b548b"
                            ],
                            "targets": [
                              {
                                "include": {
                                  "or": [
                                    "special:all",
                                    "special:all_exceptPolicyServers",
                                    "special:all_nodes_without_role"
                                  ]
                                },
                                "exclude": {
                                  "or": []
                                }
                              }
                            ],
                            "enabled": false,
                            "system": false
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/tree?prettify=true'"
          }
        ]
      }
    },
    "/rules/{ruleId}": {
      "get": {
        "summary": "Get a rule details",
        "description": "Get the details of a rule",
        "operationId": "ruleDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "ruleDetails"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/06ba8940-ed6c-4102-ba46-93d640a64c36'"
          }
        ]
      },
      "post": {
        "summary": "Update a rule details",
        "description": "Update the details of a rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/rule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updateRule"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/rules/17dadf50-6056-4c8b-a935-6b97d14b89a7' --data \"displayName=Name of rule\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a rule",
        "description": "Delete a rule.",
        "operationId": "deleteRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/rule-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "deleteRule"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "rules"
                      ],
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/rule"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Rules"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request DELETE 'https://rudder.example.com/rudder/api/latest/rules/176ad06b-ed02-4da3-8053-16225d217741'"
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "List all settings",
        "description": "Get the current value of all the settings",
        "operationId": "getAllSettings",
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getAllSettings"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the setting",
                      "required": [
                        "settings"
                      ],
                      "properties": {
                        "settings": {
                          "properties": {
                            "allowed_networks": {
                              "type": "array",
                              "description": "List of allowed networks for each policy server (root and relays)",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "root",
                                    "description": "Rudder id of the policy server"
                                  },
                                  "allowed_networks": {
                                    "description": "List of allowed networks",
                                    "type": "array",
                                    "items": {
                                      "description": "Allowed network (`0.0.0.0/0` for no restriction `a.b.c.d/32` for one IP)",
                                      "example": "192.168.40.0/24",
                                      "type": "string",
                                      "format": "CIDR network"
                                    }
                                  }
                                }
                              }
                            },
                            "global_policy_mode": {
                              "type": "string",
                              "description": "Define the default setting for global policy mode",
                              "enum": [
                                "enforce",
                                "audit"
                              ],
                              "example": "enforce"
                            },
                            "global_policy_mode_overridable": {
                              "type": "boolean",
                              "description": "Allow overrides on this default setting",
                              "example": true
                            },
                            "run_frequency": {
                              "description": "Agent run schedule - time between agent runs (in minutes)",
                              "type": "integer",
                              "example": 5
                            },
                            "first_run_hour": {
                              "type": "integer",
                              "example": 0,
                              "description": "First agent run time - hour"
                            },
                            "first_run_minute": {
                              "type": "integer",
                              "example": 0,
                              "description": "First agent run time - minute"
                            },
                            "splay_time": {
                              "type": "integer",
                              "example": 5,
                              "description": "Maximum delay after scheduled run time (random interval)"
                            },
                            "modified_file_ttl": {
                              "type": "integer",
                              "example": 7,
                              "description": "Number of days to retain modified files"
                            },
                            "output_file_ttl": {
                              "type": "integer",
                              "example": 7,
                              "description": "Number of days to retain agent output files"
                            },
                            "require_time_synchronization": {
                              "type": "boolean",
                              "example": true,
                              "description": "Require time synchronization between nodes and policy server"
                            },
                            "relay_server_synchronization_method": {
                              "type": "string",
                              "enum": [
                                "classic",
                                "rsync",
                                "disabled"
                              ],
                              "example": "classic",
                              "description": "Method used to synchronize data between server and relays, either \"classic\" (agent protocol, default), \"rsync\" (use rsync to synchronize, that you'll need to be manually set up), or \"disabled\" (use third party system to transmit data)"
                            },
                            "relay_server_synchronize_policies": {
                              "type": "boolean",
                              "example": true,
                              "description": "If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself."
                            },
                            "relay_server_synchronize_shared_files": {
                              "type": "boolean",
                              "description": "If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself."
                            },
                            "rudder_report_protocol_default": {
                              "type": "string",
                              "enum": [
                                "HTTPS",
                                "SYSLOG"
                              ],
                              "example": "HTTPS",
                              "description": "Default reporting protocol used"
                            },
                            "syslog_protocol_disabled": {
                              "type": "boolean",
                              "description": "Completely disable syslog protocol",
                              "example": true
                            },
                            "rsyslog_reporting_protocol": {
                              "type": "string",
                              "enum": [
                                "TCP",
                                "UDP"
                              ],
                              "example": "UDP",
                              "description": "Protocol used for syslog communication between node and server"
                            },
                            "reporting_mode": {
                              "type": "string",
                              "enum": [
                                "full-compliance",
                                "changes-only",
                                "reports-disabled"
                              ],
                              "example": "full-compliance",
                              "description": "Compliance reporting mode"
                            },
                            "heartbeat_frequency": {
                              "type": "integer",
                              "example": 10,
                              "description": "Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)"
                            },
                            "log_all_reports": {
                              "type": "boolean",
                              "example": true,
                              "description": "Log all reports received to `/var/log/rudder/reports/all.log`"
                            },
                            "enable_change_message": {
                              "type": "boolean",
                              "example": true,
                              "description": "Enable change audit logs"
                            },
                            "mandatory_change_message": {
                              "type": "boolean",
                              "example": false,
                              "description": "Make message mandatory"
                            },
                            "change_message_prompt": {
                              "type": "string",
                              "example": "Please provide a reason for this change",
                              "description": "Explanation to display"
                            },
                            "enable_change_request": {
                              "type": "boolean",
                              "example": false,
                              "description": "Enable Change Requests"
                            },
                            "enable_self_validation": {
                              "type": "boolean",
                              "example": true,
                              "description": "Allow self validation"
                            },
                            "enable_self_deployment": {
                              "type": "boolean",
                              "example": true,
                              "description": "Allow self deployment"
                            },
                            "display_recent_changes_graphs": {
                              "type": "boolean",
                              "example": true,
                              "description": "Display changes graphs"
                            },
                            "enable_javascript_directives": {
                              "type": "string",
                              "example": "enabled",
                              "description": "Enable script evaluation in Directives"
                            },
                            "send_metrics": {
                              "type": "string",
                              "example": "not defined",
                              "description": "Send anonymous usage statistics"
                            },
                            "node_onaccept_default_state": {
                              "type": "string",
                              "enum": [
                                "enabled",
                                "ignored",
                                "empty-policies",
                                "initializing",
                                "preparing-eol"
                              ],
                              "example": "enabled",
                              "description": "Set default state for node when they are accepted within Rudder"
                            },
                            "node_onaccept_default_policyMode": {
                              "type": "string",
                              "enum": [
                                "default",
                                "enforce",
                                "audit"
                              ],
                              "example": "default",
                              "description": "Default policy mode for accepted node"
                            },
                            "unexpected_allows_duplicate": {
                              "type": "boolean",
                              "example": true,
                              "description": "Ignore duplicated compliance reports",
                              "default": true
                            },
                            "unexpected_unbound_var_values": {
                              "type": "boolean",
                              "description": "Allows multiple reports for configuration based on a multivalued variable",
                              "default": true
                            },
                            "rudder_compute_changes": {
                              "type": "boolean",
                              "default": true,
                              "description": "Compute list of changes (repaired reports) per rule"
                            },
                            "rudder_generation_compute_dyngroups": {
                              "type": "boolean",
                              "default": true,
                              "description": "Recompute all dynamic groups at the start of policy generation"
                            },
                            "rudder_save_db_compliance_levels": {
                              "type": "boolean",
                              "default": true,
                              "description": "Store all compliance levels in database"
                            },
                            "rudder_save_db_compliance_details": {
                              "type": "boolean",
                              "default": false,
                              "description": "Store all compliance details in database"
                            },
                            "rudder_generation_max_parallelism": {
                              "type": "string",
                              "default": "0.5",
                              "description": "Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)"
                            },
                            "rudder_generation_js_timeout": {
                              "type": "integer",
                              "default": 30,
                              "description": "Policy generation JS evaluation of directive parameter timeout in seconds"
                            },
                            "rudder_generation_continue_on_error": {
                              "type": "boolean",
                              "default": false,
                              "description": "Policy generation continues on error during NodeConfiguration evaluation"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Settings"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/settings"
          }
        ]
      }
    },
    "/settings/{settingId}": {
      "get": {
        "summary": "Get the value of a setting",
        "description": "Get the current value of a specific setting",
        "operationId": "getSetting",
        "parameters": [
          {
            "$ref": "#/components/parameters/setting-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the setting",
                      "example": "global_policy_mode"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getSetting"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the setting",
                      "required": [
                        "settings"
                      ],
                      "properties": {
                        "settingId": {
                          "type": "string",
                          "example": "value",
                          "description": "Id and value of the property"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Settings"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/settings/run_frequency"
          }
        ]
      },
      "post": {
        "summary": "Set the value of a setting",
        "description": "Set the current value of a specific setting",
        "operationId": "modifySetting",
        "parameters": [
          {
            "$ref": "#/components/parameters/setting-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "New value of the setting",
                    "type": "string",
                    "example": "enforce"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the setting",
                      "example": "global_policy_mode"
                    },
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "modifySetting"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the setting",
                      "required": [
                        "settings"
                      ],
                      "properties": {
                        "settingId": {
                          "type": "string",
                          "example": "value",
                          "description": "Id and value of the property"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Settings"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/settings/global_policy_mode_overridable --data \"value=true\""
          }
        ]
      }
    },
    "/system/archives/{archiveKind}": {
      "get": {
        "summary": "List archives",
        "description": "List configuration archives",
        "operationId": "listArchives",
        "parameters": [
          {
            "$ref": "#/components/parameters/archive-kind"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The kind of the archive",
                      "enum": [
                        "archiveFull",
                        "archiveGroups",
                        "archiveRules",
                        "archiveDirectives"
                      ],
                      "example": "archiveFull"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "full"
                      ],
                      "properties": {
                        "full": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "commiter",
                              "gitCommit",
                              "id"
                            ],
                            "properties": {
                              "commiter": {
                                "type": "string",
                                "example": "Rudder system account"
                              },
                              "gitCommit": {
                                "type": "string",
                                "format": "hash",
                                "example": "546de1b211ecc5b7ca295abac2191bc6bb05d44e"
                              },
                              "id": {
                                "type": "string",
                                "example": "2019-09-17_16-06-15.255"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/archives/full"
          }
        ]
      },
      "post": {
        "summary": "Create an archive",
        "description": "Create new archive of the given kind",
        "operationId": "createArchive",
        "parameters": [
          {
            "$ref": "#/components/parameters/archive-kind"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The kind of the archive",
                      "enum": [
                        "archiveFull",
                        "archiveGroups",
                        "archiveRules",
                        "archiveDirectives"
                      ],
                      "example": "archiveFull"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "full"
                      ],
                      "properties": {
                        "full": {
                          "type": "object",
                          "required": [
                            "commiter",
                            "gitCommit",
                            "id"
                          ],
                          "properties": {
                            "commiter": {
                              "type": "string",
                              "example": "Rudder system account"
                            },
                            "gitCommit": {
                              "type": "string",
                              "format": "hash",
                              "example": "546de1b211ecc5b7ca295abac2191bc6bb05d44e"
                            },
                            "id": {
                              "type": "string",
                              "example": "2019-09-17_16-06-15.255"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/system/archives/full"
          }
        ]
      }
    },
    "/system/info": {
      "get": {
        "summary": "Get server information",
        "description": "Get information about the server version",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "description": "Service information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getSystemInfo"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Information about the service",
                      "required": [
                        "rudder"
                      ],
                      "properties": {
                        "rudder": {
                          "required": [
                            "major-version",
                            "full-version",
                            "build-time"
                          ],
                          "properties": {
                            "major-version": {
                              "type": "string",
                              "example": "6.0",
                              "format": "X.Y"
                            },
                            "full-version": {
                              "type": "string",
                              "example": "6.0.4",
                              "format": "X.Y.Z"
                            },
                            "build-time": {
                              "type": "string",
                              "format": "date",
                              "example": "2019-03-25T10:11:23.000Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/info"
          }
        ]
      }
    },
    "/system/reload": {
      "post": {
        "summary": "Reload both techniques and dynamic groups",
        "description": "Reload both techniques and dynamic groups",
        "operationId": "reloadAll",
        "responses": {
          "200": {
            "description": "Service reload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "reloadAll"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups",
                        "techniques"
                      ],
                      "properties": {
                        "groups": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        },
                        "techniques": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload'"
          }
        ]
      }
    },
    "/system/status": {
      "get": {
        "summary": "Get server status",
        "description": "Get information about current server status",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Service status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "getStatus"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Status of the service",
                      "properties": {
                        "global": {
                          "type": "string",
                          "enum": [
                            "OK"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/status"
          }
        ]
      }
    },
    "/system/update/policies": {
      "post": {
        "summary": "Trigger update of policies",
        "description": "Update configuration policies if needed",
        "operationId": "updatePolicies",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "updatePolicies"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "policies"
                      ],
                      "properties": {
                        "policies": {
                          "type": "string",
                          "enum": [
                            "Started"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "System"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/update/policies'"
          }
        ]
      }
    },
    "/techniques": {
      "get": {
        "summary": "List all techniques",
        "description": "List all technique with their versions",
        "operationId": "listTechniques",
        "responses": {
          "200": {
            "description": "Techniques information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listTechniques"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "techniques"
                      ],
                      "properties": {
                        "techniques": {
                          "$ref": "#/components/schemas/techniques"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Techniques"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques"
          }
        ]
      }
    },
    "/techniques/{techniqueName}/directives": {
      "get": {
        "summary": "List all directives based on a technique",
        "description": "List all directives based on all version of a technique",
        "operationId": "listTechniquesDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/technique-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Techniques information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listTechniquesDirectives"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Techniques"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques/checkGenericFileContent/directives"
          }
        ]
      }
    },
    "/techniques/{techniqueName}/{techniqueVersion}/directives": {
      "get": {
        "summary": "List all directives based on a version of a technique",
        "description": "List all directives based on a version of a technique",
        "operationId": "listTechniqueVersionDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/technique-name"
          },
          {
            "$ref": "#/components/parameters/technique-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Techniques information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "action",
                    "data"
                  ],
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "Result of the request",
                      "enum": [
                        "success",
                        "error"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "description": "The id of the action",
                      "enum": [
                        "listTechniqueDirectives"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "directives"
                      ],
                      "properties": {
                        "directives": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/directive"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Techniques"
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques/checkGenericFileContent/6.0/directives"
          }
        ]
      }
    }
  },
  "security": [
    {
      "API tokens": []
    }
  ],
  "servers": [
    {
      "description": "Rudder server",
      "url": "https://rudder.example.local/rudder/api/latest/"
    }
  ],
  "tags": [
    {
      "description": "Access compliance data",
      "name": "Compliance"
    },
    {
      "description": "Rules management",
      "name": "Rules"
    },
    {
      "description": "Directives management",
      "name": "Directives"
    },
    {
      "description": "Techniques management",
      "name": "Techniques"
    },
    {
      "description": "Groups management",
      "name": "Groups"
    },
    {
      "description": "Nodes management",
      "name": "Nodes"
    },
    {
      "description": "Inventory processing service",
      "name": "Inventories"
    },
    {
      "description": "Global parameters",
      "name": "Parameters"
    },
    {
      "description": "Server configuration",
      "name": "Settings"
    },
    {
      "description": "Internal components and administration",
      "name": "System"
    },
    {
      "description": "**Requires that the `changes-validation` plugin is installed on the server.**\n\nManage change requests.",
      "name": "🧩 Change requests"
    },
    {
      "description": "**Requires that the `datasources` plugin is installed on the server.**\n\nData sources plugin configuration.",
      "name": "🧩 Data sources"
    }
  ]
}